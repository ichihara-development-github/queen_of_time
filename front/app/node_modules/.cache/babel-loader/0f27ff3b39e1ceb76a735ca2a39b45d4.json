{"ast":null,"code":"import { areViewsEqual } from './views';\nexport var findClosestEnabledDate = function findClosestEnabledDate(_ref) {\n  var date = _ref.date,\n      disableFuture = _ref.disableFuture,\n      disablePast = _ref.disablePast,\n      maxDate = _ref.maxDate,\n      minDate = _ref.minDate,\n      isDateDisabled = _ref.isDateDisabled,\n      utils = _ref.utils,\n      timezone = _ref.timezone;\n  var today = utils.startOfDay(utils.dateWithTimezone(undefined, timezone));\n\n  if (disablePast && utils.isBefore(minDate, today)) {\n    minDate = today;\n  }\n\n  if (disableFuture && utils.isAfter(maxDate, today)) {\n    maxDate = today;\n  }\n\n  var forward = date;\n  var backward = date;\n\n  if (utils.isBefore(date, minDate)) {\n    forward = minDate;\n    backward = null;\n  }\n\n  if (utils.isAfter(date, maxDate)) {\n    if (backward) {\n      backward = maxDate;\n    }\n\n    forward = null;\n  }\n\n  while (forward || backward) {\n    if (forward && utils.isAfter(forward, maxDate)) {\n      forward = null;\n    }\n\n    if (backward && utils.isBefore(backward, minDate)) {\n      backward = null;\n    }\n\n    if (forward) {\n      if (!isDateDisabled(forward)) {\n        return forward;\n      }\n\n      forward = utils.addDays(forward, 1);\n    }\n\n    if (backward) {\n      if (!isDateDisabled(backward)) {\n        return backward;\n      }\n\n      backward = utils.addDays(backward, -1);\n    }\n  }\n\n  return null;\n};\nexport var replaceInvalidDateByNull = function replaceInvalidDateByNull(utils, value) {\n  return value == null || !utils.isValid(value) ? null : value;\n};\nexport var applyDefaultDate = function applyDefaultDate(utils, value, defaultValue) {\n  if (value == null || !utils.isValid(value)) {\n    return defaultValue;\n  }\n\n  return value;\n};\nexport var areDatesEqual = function areDatesEqual(utils, a, b) {\n  if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {\n    return true;\n  }\n\n  return utils.isEqual(a, b);\n};\nexport var getMonthsInYear = function getMonthsInYear(utils, year) {\n  var firstMonth = utils.startOfYear(year);\n  var months = [firstMonth];\n\n  while (months.length < 12) {\n    var prevMonth = months[months.length - 1];\n    months.push(utils.addMonths(prevMonth, 1));\n  }\n\n  return months;\n};\nexport var mergeDateAndTime = function mergeDateAndTime(utils, dateParam, timeParam) {\n  var mergedDate = dateParam;\n  mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));\n  mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));\n  mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));\n  return mergedDate;\n};\nexport var getTodayDate = function getTodayDate(utils, timezone, valueType) {\n  return valueType === 'date' ? utils.startOfDay(utils.dateWithTimezone(undefined, timezone)) : utils.dateWithTimezone(undefined, timezone);\n};\nexport var formatMeridiem = function formatMeridiem(utils, meridiem) {\n  var date = utils.setHours(utils.date(), meridiem === 'am' ? 2 : 14);\n  return utils.format(date, 'meridiem');\n};\nvar dateViews = ['year', 'month', 'day'];\nexport var isDatePickerView = function isDatePickerView(view) {\n  return dateViews.includes(view);\n};\nexport var resolveDateFormat = function resolveDateFormat(utils, _ref2, isInToolbar) {\n  var format = _ref2.format,\n      views = _ref2.views;\n\n  if (format != null) {\n    return format;\n  }\n\n  var formats = utils.formats;\n\n  if (areViewsEqual(views, ['year'])) {\n    return formats.year;\n  }\n\n  if (areViewsEqual(views, ['month'])) {\n    return formats.month;\n  }\n\n  if (areViewsEqual(views, ['day'])) {\n    return formats.dayOfMonth;\n  }\n\n  if (areViewsEqual(views, ['month', 'year'])) {\n    return \"\".concat(formats.month, \" \").concat(formats.year);\n  }\n\n  if (areViewsEqual(views, ['day', 'month'])) {\n    return \"\".concat(formats.month, \" \").concat(formats.dayOfMonth);\n  }\n\n  if (isInToolbar) {\n    // Little localization hack (Google is doing the same for android native pickers):\n    // For english localization it is convenient to include weekday into the date \"Mon, Jun 1\".\n    // For other locales using strings like \"June 1\", without weekday.\n    return /en/.test(utils.getCurrentLocaleCode()) ? formats.normalDateWithWeekday : formats.normalDate;\n  }\n\n  return formats.keyboardDate;\n};","map":null,"metadata":{},"sourceType":"module"}