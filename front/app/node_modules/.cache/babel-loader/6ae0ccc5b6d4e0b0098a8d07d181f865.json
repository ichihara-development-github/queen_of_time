{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState, useContext } from \"react\";\nimport { ConfigContext } from \"../contexts/config\";\n\nvar useTextFilter = function useTextFilter(state, param, text) {\n  console.log(text);\n  console.log(state);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filtered = _useState2[0],\n      setFiltered = _useState2[1]; // useEffect(() => {\n\n\n  if (!state) {\n    return;\n  }\n\n  var newList = state.filter(function (m) {\n    return m[param].toLowerCase().indexOf(text) !== -1;\n  });\n  setFiltered(newList); // }, [text]);\n\n  return filtered;\n};\n\nvar useDateFilter = function useDateFilter(list, date) {\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filtered = _useState4[0],\n      setFiltered = _useState4[1];\n\n  var formattedDate = \"\".concat(date.getFullYear(), \"-\").concat(('00' + (date.getMonth() + 1)).slice(-2), \"-\").concat(('00' + date.getDate()).slice(-2));\n  useEffect(function () {\n    var newList = list.filter(function (elm) {\n      return elm.date == formattedDate;\n    });\n    newList.sort(function (k, v) {\n      return k.date - k.date;\n    });\n    setFiltered(newList);\n  }, [date, list]);\n  return filtered;\n};\n\nvar useMonthFilter = function useMonthFilter(list, month) {\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filtered = _useState6[0],\n      setFiltered = _useState6[1];\n\n  useEffect(function () {\n    var newList = list.filter(function (elm) {\n      return new Date(Date.parse(elm.date)).getMonth() + 1 === month;\n    });\n    newList.sort(function (a, b) {\n      return a.date - b.date;\n    });\n    setFiltered(newList);\n  }, [month]);\n  return filtered;\n};\n\nexport { useTextFilter, useDateFilter, useMonthFilter };","map":{"version":3,"names":["useEffect","useState","useContext","ConfigContext","useTextFilter","state","param","text","console","log","filtered","setFiltered","newList","filter","m","toLowerCase","indexOf","useDateFilter","list","date","formattedDate","getFullYear","getMonth","slice","getDate","elm","sort","k","v","useMonthFilter","month","Date","parse","a","b"],"sources":["/usr/src/app/app/src/customeHooks/hooks.js"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\"\r\nimport { ConfigContext } from \"../contexts/config\";\r\n\r\n\r\nconst useTextFilter = (state,param,text) => {\r\nconsole.log(text)\r\nconsole.log(state)\r\nconst [filtered, setFiltered] = useState([]);\r\n\r\n  // useEffect(() => {\r\n    if (!state){return}\r\n    const newList = state.filter((m) => {\r\n      return m[param].toLowerCase().indexOf(text) !== -1 \r\n    });\r\n    setFiltered(newList); \r\n  // }, [text]);\r\n    return filtered;\r\n}\r\n\r\nconst useDateFilter = (list, date) => {\r\n \r\n  const [filtered, setFiltered] = useState([]);\r\n  const formattedDate = `${date.getFullYear()}-${( '00' + (date.getMonth()+1)).slice( -2 )}-${('00'+date.getDate()).slice(-2)}`\r\n\r\n  useEffect(() =>{\r\n    const newList = list.filter(elm => elm.date == formattedDate);\r\n    newList.sort((k, v) => k.date - k.date);\r\n    setFiltered(newList);\r\n  },[date,list]\r\n  );\r\n\r\n  return filtered;\r\n}\r\n\r\nconst useMonthFilter = (list, month) => {\r\n \r\n  const [filtered, setFiltered] = useState([]);\r\n\r\n  useEffect(() =>{\r\n    const newList = list.filter(elm => {\r\n      return (new Date(Date.parse(elm.date)).getMonth() + 1) === month;\r\n    })\r\n    newList.sort((a, b) => a.date - b.date);\r\n    setFiltered(newList);\r\n  },[month]\r\n  );\r\n\r\n  return filtered;\r\n}\r\n\r\n\r\n\r\nexport {useTextFilter, useDateFilter, useMonthFilter};"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAOC,KAAP,EAAaC,IAAb,EAAsB;EAC5CC,OAAO,CAACC,GAAR,CAAYF,IAAZ;EACAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;EAF4C,gBAGZJ,QAAQ,CAAC,EAAD,CAHI;EAAA;EAAA,IAGrCS,QAHqC;EAAA,IAG3BC,WAH2B,kBAK1C;;;EACE,IAAI,CAACN,KAAL,EAAW;IAAC;EAAO;;EACnB,IAAMO,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAa,UAACC,CAAD,EAAO;IAClC,OAAOA,CAAC,CAACR,KAAD,CAAD,CAASS,WAAT,GAAuBC,OAAvB,CAA+BT,IAA/B,MAAyC,CAAC,CAAjD;EACD,CAFe,CAAhB;EAGAI,WAAW,CAACC,OAAD,CAAX,CAVwC,CAW1C;;EACE,OAAOF,QAAP;AACH,CAbD;;AAeA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,IAAP,EAAgB;EAAA,iBAEJlB,QAAQ,CAAC,EAAD,CAFJ;EAAA;EAAA,IAE7BS,QAF6B;EAAA,IAEnBC,WAFmB;;EAGpC,IAAMS,aAAa,aAAMD,IAAI,CAACE,WAAL,EAAN,cAA4B,CAAE,QAAQF,IAAI,CAACG,QAAL,KAAgB,CAAxB,CAAF,EAA8BC,KAA9B,CAAqC,CAAC,CAAtC,CAA5B,cAAyE,CAAC,OAAKJ,IAAI,CAACK,OAAL,EAAN,EAAsBD,KAAtB,CAA4B,CAAC,CAA7B,CAAzE,CAAnB;EAEAvB,SAAS,CAAC,YAAK;IACb,IAAMY,OAAO,GAAGM,IAAI,CAACL,MAAL,CAAY,UAAAY,GAAG;MAAA,OAAIA,GAAG,CAACN,IAAJ,IAAYC,aAAhB;IAAA,CAAf,CAAhB;IACAR,OAAO,CAACc,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;MAAA,OAAUD,CAAC,CAACR,IAAF,GAASQ,CAAC,CAACR,IAArB;IAAA,CAAb;IACAR,WAAW,CAACC,OAAD,CAAX;EACD,CAJQ,EAIP,CAACO,IAAD,EAAMD,IAAN,CAJO,CAAT;EAOA,OAAOR,QAAP;AACD,CAbD;;AAeA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACX,IAAD,EAAOY,KAAP,EAAiB;EAAA,iBAEN7B,QAAQ,CAAC,EAAD,CAFF;EAAA;EAAA,IAE/BS,QAF+B;EAAA,IAErBC,WAFqB;;EAItCX,SAAS,CAAC,YAAK;IACb,IAAMY,OAAO,GAAGM,IAAI,CAACL,MAAL,CAAY,UAAAY,GAAG,EAAI;MACjC,OAAQ,IAAIM,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACN,IAAf,CAAT,EAA+BG,QAA/B,KAA4C,CAA7C,KAAoDQ,KAA3D;IACD,CAFe,CAAhB;IAGAlB,OAAO,CAACc,IAAR,CAAa,UAACO,CAAD,EAAIC,CAAJ;MAAA,OAAUD,CAAC,CAACd,IAAF,GAASe,CAAC,CAACf,IAArB;IAAA,CAAb;IACAR,WAAW,CAACC,OAAD,CAAX;EACD,CANQ,EAMP,CAACkB,KAAD,CANO,CAAT;EASA,OAAOpB,QAAP;AACD,CAdD;;AAkBA,SAAQN,aAAR,EAAuBa,aAAvB,EAAsCY,cAAtC"},"metadata":{},"sourceType":"module"}