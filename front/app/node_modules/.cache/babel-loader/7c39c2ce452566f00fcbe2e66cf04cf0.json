{"ast":null,"code":"var timeConvert = function timeConvert(min, type) {\n  switch (type) {\n    case \"full\":\n      return \"\".concat(Math.floor(min / 60), \"\\u6642\\u9593\").concat(min % 60, \"\\u5206\");\n\n    case \"colon\":\n      return \"\".concat(Math.floor(min / 60), \":\").concat(min % 60);\n\n    case \"decimal\":\n      return \"\".concat(Math.floor(min / 60) + 0.25 * Math.floor(min % 60 / 15));\n  }\n};\n\nvar totalingTimes = function totalingTimes(attendances) {\n  var result = {\n    workDate: 0,\n    totalWorkTime: 0,\n    over_time: 0,\n    midnight_time: 0,\n    midnight_over_time: 0\n  };\n\n  if (!attendances.length) {\n    return result;\n  }\n\n  var add = function add(key) {\n    var calc = attendances.reduce(function (sum, elm) {\n      return sum + elm[key];\n    }, 0);\n    return calc;\n  };\n\n  result = {\n    workDate: attendances.length,\n    totalWorkingTime: add(\"working_time\"),\n    overtime: add(\"overtime\"),\n    midnight_time: add(\"midnight_time\"),\n    midnight_overtime: add(\"midnight_overtime\")\n  };\n  return result;\n};\n\nexport { totalingTimes, timeConvert };","map":{"version":3,"names":["timeConvert","min","type","Math","floor","totalingTimes","attendances","result","workDate","totalWorkTime","over_time","midnight_time","midnight_over_time","length","add","key","calc","reduce","sum","elm","totalWorkingTime","overtime","midnight_overtime"],"sources":["/usr/src/app/app/src/lib/calcTimes.js"],"sourcesContent":["const timeConvert = (min, type) => {\r\n    \r\n    switch(type){\r\n        case \"full\":\r\n            return `${Math.floor(min/60)}時間${(min % 60)}分`\r\n        case \"colon\":\r\n            return `${Math.floor(min/60)}:${(min % 60)}`\r\n        case \"decimal\":\r\n            return `${Math.floor(min/60) + (0.25 * Math.floor((min % 60)/15))}`\r\n    }\r\n\r\n}\r\n\r\n\r\nconst totalingTimes = (attendances) => {\r\n\r\n    let result = {\r\n        workDate: 0,\r\n        totalWorkTime: 0,\r\n        over_time: 0,\r\n        midnight_time: 0,\r\n        midnight_over_time: 0\r\n\r\n    }\r\n\r\n\r\n\r\n    if (!attendances.length){ return result }\r\n\r\n\r\n    const add = (key) => {\r\n        const calc = attendances.reduce(function(sum, elm){\r\n            return sum + elm[key];\r\n        },0);\r\n\r\n        return calc\r\n\r\n    }\r\n\r\n    result = {\r\n        workDate: attendances.length,\r\n        totalWorkingTime: add(\"working_time\"),\r\n        overtime: add(\"overtime\"),\r\n        midnight_time: add(\"midnight_time\"),\r\n        midnight_overtime: add(\"midnight_overtime\")\r\n    }\r\n\r\n\r\n    return result;\r\n}\r\n\r\nexport { totalingTimes, timeConvert }\r\n"],"mappings":"AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,IAAN,EAAe;EAE/B,QAAOA,IAAP;IACI,KAAK,MAAL;MACI,iBAAUC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAC,EAAf,CAAV,yBAAkCA,GAAG,GAAG,EAAxC;;IACJ,KAAK,OAAL;MACI,iBAAUE,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAC,EAAf,CAAV,cAAiCA,GAAG,GAAG,EAAvC;;IACJ,KAAK,SAAL;MACI,iBAAUE,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAC,EAAf,IAAsB,OAAOE,IAAI,CAACC,KAAL,CAAYH,GAAG,GAAG,EAAP,GAAW,EAAtB,CAAvC;EANR;AASH,CAXD;;AAcA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,WAAD,EAAiB;EAEnC,IAAIC,MAAM,GAAG;IACTC,QAAQ,EAAE,CADD;IAETC,aAAa,EAAE,CAFN;IAGTC,SAAS,EAAE,CAHF;IAITC,aAAa,EAAE,CAJN;IAKTC,kBAAkB,EAAE;EALX,CAAb;;EAWA,IAAI,CAACN,WAAW,CAACO,MAAjB,EAAwB;IAAE,OAAON,MAAP;EAAe;;EAGzC,IAAMO,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAS;IACjB,IAAMC,IAAI,GAAGV,WAAW,CAACW,MAAZ,CAAmB,UAASC,GAAT,EAAcC,GAAd,EAAkB;MAC9C,OAAOD,GAAG,GAAGC,GAAG,CAACJ,GAAD,CAAhB;IACH,CAFY,EAEX,CAFW,CAAb;IAIA,OAAOC,IAAP;EAEH,CAPD;;EASAT,MAAM,GAAG;IACLC,QAAQ,EAAEF,WAAW,CAACO,MADjB;IAELO,gBAAgB,EAAEN,GAAG,CAAC,cAAD,CAFhB;IAGLO,QAAQ,EAAEP,GAAG,CAAC,UAAD,CAHR;IAILH,aAAa,EAAEG,GAAG,CAAC,eAAD,CAJb;IAKLQ,iBAAiB,EAAER,GAAG,CAAC,mBAAD;EALjB,CAAT;EASA,OAAOP,MAAP;AACH,CAnCD;;AAqCA,SAASF,aAAT,EAAwBL,WAAxB"},"metadata":{},"sourceType":"module"}