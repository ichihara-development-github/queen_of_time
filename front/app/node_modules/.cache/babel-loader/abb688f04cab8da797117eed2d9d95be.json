{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\n\nvar socket_1 = require(\"./socket\");\n\nvar typed_events_1 = require(\"./typed-events\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar broadcast_operator_1 = require(\"./broadcast-operator\");\n\nvar debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n\nvar Namespace = /*#__PURE__*/function (_typed_events_1$Stric) {\n  _inherits(Namespace, _typed_events_1$Stric);\n\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  function Namespace(server, name) {\n    var _this;\n\n    _classCallCheck(this, Namespace);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Namespace).call(this));\n    _this.sockets = new Map();\n    /** @private */\n\n    _this._fns = [];\n    /** @private */\n\n    _this._ids = 0;\n    _this.server = server;\n    _this.name = name;\n\n    _this._initAdapter();\n\n    return _this;\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n\n\n  _createClass(Namespace, [{\n    key: \"_initAdapter\",\n    value: function _initAdapter() {\n      // @ts-ignore\n      this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Sets up namespace middleware.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(fn) {\n      this._fns.push(fn);\n\n      return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(socket, fn) {\n      var fns = this._fns.slice(0);\n\n      if (!fns.length) return fn(null);\n\n      function run(i) {\n        fns[i](socket, function (err) {\n          // upon error, short-circuit\n          if (err) return fn(err); // if no middleware left, summon callback\n\n          if (!fns[i + 1]) return fn(null); // go on to next\n\n          run(i + 1);\n        });\n      }\n\n      run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"except\",\n    value: function except(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n\n  }, {\n    key: \"_add\",\n    value: function _add(client, query, fn) {\n      var _this2 = this;\n\n      debug(\"adding socket to nsp %s\", this.name);\n      var socket = new socket_1.Socket(this, client, query);\n      this.run(socket, function (err) {\n        process.nextTick(function () {\n          if (\"open\" !== client.conn.readyState) {\n            debug(\"next called after client was closed - ignoring socket\");\n\n            socket._cleanup();\n\n            return;\n          }\n\n          if (err) {\n            debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n\n            socket._cleanup();\n\n            if (client.conn.protocol === 3) {\n              return socket._error(err.data || err.message);\n            } else {\n              return socket._error({\n                message: err.message,\n                data: err.data\n              });\n            }\n          } // track socket\n\n\n          _this2.sockets.set(socket.id, socket); // it's paramount that the internal `onconnect` logic\n          // fires before user-set events to prevent state order\n          // violations (such as a disconnection before the connection\n          // logic is complete)\n\n\n          socket._onconnect();\n\n          if (fn) fn(); // fire user-set events\n\n          _this2.emitReserved(\"connect\", socket);\n\n          _this2.emitReserved(\"connection\", socket);\n        });\n      });\n      return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_remove\",\n    value: function _remove(socket) {\n      if (this.sockets.has(socket.id)) {\n        this.sockets.delete(socket.id);\n      } else {\n        debug(\"ignoring remove for %s\", socket.id);\n      }\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @return Always true\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _broadcast_operator_;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_broadcast_operator_ = new broadcast_operator_1.BroadcastOperator(this.adapter)).emit.apply(_broadcast_operator_, [ev].concat(args));\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Emit a packet to other Socket.IO servers\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     * @public\n     */\n\n  }, {\n    key: \"serverSideEmit\",\n    value: function serverSideEmit(ev) {\n      if (exports.RESERVED_EVENTS.has(ev)) {\n        throw new Error(\"\\\"\".concat(String(ev), \"\\\" is a reserved event name\"));\n      }\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      args.unshift(ev);\n      this.adapter.serverSideEmit(args);\n      return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onServerSideEmit\",\n    value: function _onServerSideEmit(args) {\n      _get(_getPrototypeOf(Namespace.prototype), \"emitUntyped\", this).apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"allSockets\",\n    value: function allSockets() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(_compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"timeout\",\n\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * <pre><code>\n     *\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   // ...\n     * });\n     *\n     * </pre></code>\n     *\n     * @param timeout\n     */\n    value: function timeout(_timeout) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(_timeout);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @public\n     */\n\n  }, {\n    key: \"fetchSockets\",\n    value: function fetchSockets() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param room\n     * @public\n     */\n\n  }, {\n    key: \"socketsJoin\",\n    value: function socketsJoin(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param room\n     * @public\n     */\n\n  }, {\n    key: \"socketsLeave\",\n    value: function socketsLeave(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param close - whether to close the underlying connection\n     * @public\n     */\n\n  }, {\n    key: \"disconnectSockets\",\n    value: function disconnectSockets() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"local\",\n    get: function get() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n  }]);\n\n  return Namespace;\n}(typed_events_1.StrictEventEmitter);\n\nexports.Namespace = Namespace;","map":null,"metadata":{},"sourceType":"script"}