{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"value\", \"referenceDate\"];\nimport { areDatesEqual, getTodayDate, replaceInvalidDateByNull } from './date-utils';\nimport { getDefaultReferenceDate } from './getDefaultReferenceDate';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport var singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: getTodayDate,\n  getInitialReferenceValue: function getInitialReferenceValue(_ref) {\n    var value = _ref.value,\n        referenceDate = _ref.referenceDate,\n        params = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    if (value != null && params.utils.isValid(value)) {\n      return value;\n    }\n\n    if (referenceDate != null) {\n      return referenceDate;\n    }\n\n    return getDefaultReferenceDate(params);\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: function isSameError(a, b) {\n    return a === b;\n  },\n  hasError: function hasError(error) {\n    return error != null;\n  },\n  defaultErrorState: null,\n  getTimezone: function getTimezone(utils, value) {\n    return value == null || !utils.isValid(value) ? null : utils.getTimezone(value);\n  },\n  setTimezone: function setTimezone(utils, timezone, value) {\n    return value == null ? null : utils.setTimezone(value, timezone);\n  }\n};\nexport var singleItemFieldValueManager = {\n  updateReferenceValue: function updateReferenceValue(utils, value, prevReferenceValue) {\n    return value == null || !utils.isValid(value) ? prevReferenceValue : value;\n  },\n  getSectionsFromValue: function getSectionsFromValue(utils, date, prevSections, isRTL, getSectionsFromDate) {\n    var shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: function getActiveDateManager(utils, state) {\n    return {\n      date: state.value,\n      referenceDate: state.referenceValue,\n      getSections: function getSections(sections) {\n        return sections;\n      },\n      getNewValuesFromNewActiveDate: function getNewValuesFromNewActiveDate(newActiveDate) {\n        return {\n          value: newActiveDate,\n          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n        };\n      }\n    };\n  },\n  parseValueStr: function parseValueStr(valueStr, referenceValue, parseDate) {\n    return parseDate(valueStr.trim(), referenceValue);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}