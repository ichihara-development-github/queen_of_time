{"ast":null,"code":"import _toConsumableArray from \"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createIsAfterIgnoreDatePart } from './time-utils';\nimport { mergeDateAndTime, getTodayDate } from './date-utils';\nexport var SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nexport var getSectionTypeGranularity = function getSectionTypeGranularity(sections) {\n  return Math.max.apply(Math, _toConsumableArray(sections.map(function (section) {\n    var _SECTION_TYPE_GRANULA;\n\n    return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;\n  })));\n};\nexport var getViewsGranularity = function getViewsGranularity(views) {\n  return Math.max.apply(Math, _toConsumableArray(views.map(function (view) {\n    var _SECTION_TYPE_GRANULA2;\n\n    return (_SECTION_TYPE_GRANULA2 = SECTION_TYPE_GRANULARITY[view]) != null ? _SECTION_TYPE_GRANULA2 : 1;\n  })));\n};\n\nvar roundDate = function roundDate(utils, granularity, date) {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  } // We don't have startOfHour / startOfMinute / startOfSecond\n\n\n  var roundedDate = date;\n\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n\n  return roundedDate;\n};\n\nexport var getDefaultReferenceDate = function getDefaultReferenceDate(_ref) {\n  var props = _ref.props,\n      utils = _ref.utils,\n      granularity = _ref.granularity,\n      timezone = _ref.timezone,\n      inGetTodayDate = _ref.getTodayDate;\n\n  var _props$disableIgnorin;\n\n  var referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));\n\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n\n  var isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);\n\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));\n  }\n\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));\n  }\n\n  return referenceDate;\n};","map":null,"metadata":{},"sourceType":"module"}