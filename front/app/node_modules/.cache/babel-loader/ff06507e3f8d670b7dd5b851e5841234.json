{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = _interopRequireDefault(require(\"./native\"));\n\nvar _googleApi = _interopRequireDefault(require(\"./googleApi\"));\n\nvar defaultOptions = {\n  locale: 'en',\n  fallbackToGoogle: false,\n  forceGoogleOnIos: false,\n  maxResults: 2\n};\n\nfunction getApiKey(apiKey) {\n  if (!apiKey) {\n    throw new Error('Invalid API Key: `apiKey` is required for using Google Maps API.');\n  }\n\n  return apiKey;\n}\n\nfunction geocodePositionGoogle(position) {\n  var options,\n      apiKey,\n      locale,\n      headers,\n      _args = arguments;\n  return _regenerator.default.async(function geocodePositionGoogle$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          apiKey = getApiKey(options.apiKey);\n          locale = options.locale || defaultOptions.locale;\n          headers = options.requestHeaders;\n          return _context.abrupt(\"return\", _googleApi.default.geocodePosition(apiKey, position, locale, headers));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction geocodeAddressGoogle(address) {\n  var options,\n      apiKey,\n      locale,\n      headers,\n      _args2 = arguments;\n  return _regenerator.default.async(function geocodeAddressGoogle$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n          apiKey = getApiKey(options.apiKey);\n          locale = options.locale || defaultOptions.locale;\n          headers = options.requestHeaders;\n\n          if (!options.bounds) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", _googleApi.default.geocodeAddressWithBounds(apiKey, address, options.bounds, locale, headers));\n\n        case 6:\n          return _context2.abrupt(\"return\", _googleApi.default.geocodeAddress(apiKey, address, locale, headers));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction geocodePosition(position) {\n  var options,\n      _args3 = arguments;\n  return _regenerator.default.async(function geocodePosition$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n\n          if (!(!position || position.lat == null || position.lng == null)) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new Error('Invalid Position: `{lat, lng}` is required');\n\n        case 3:\n          if (!(options.forceGoogleOnIos && _reactNative.Platform.OS === 'ios')) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", geocodePositionGoogle(position, options));\n\n        case 5:\n          if (!(_native.default == null)) {\n            _context3.next = 9;\n            break;\n          }\n\n          if (!options.fallbackToGoogle) {\n            _context3.next = 8;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", geocodePositionGoogle(position, options));\n\n        case 8:\n          throw new Error('Missing Native Module: Please check the module linking, ' + 'or set `fallbackToGoogle` in the init options.');\n\n        case 9:\n          _context3.prev = 9;\n\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context3.next = 16;\n            break;\n          }\n\n          _context3.next = 13;\n          return _regenerator.default.awrap(_native.default.geocodePositionAndroid(position, options));\n\n        case 13:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 16:\n          _context3.next = 18;\n          return _regenerator.default.awrap(_native.default.geocodePosition(position, options.locale || defaultOptions.locale, options.maxResults || defaultOptions.maxResults));\n\n        case 18:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 19:\n          _context3.next = 26;\n          break;\n\n        case 21:\n          _context3.prev = 21;\n          _context3.t0 = _context3[\"catch\"](9);\n\n          if (!options.fallbackToGoogle) {\n            _context3.next = 25;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", geocodePositionGoogle(position, options));\n\n        case 25:\n          throw new Error('Native Error: ' + (_context3.t0 === null || _context3.t0 === void 0 ? void 0 : _context3.t0.message) || 'Unknown Execption.');\n\n        case 26:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[9, 21]], Promise);\n}\n\nfunction geocodeAddress(address) {\n  var options,\n      _options$regionIos,\n      center,\n      radius,\n      _args4 = arguments;\n\n  return _regenerator.default.async(function geocodeAddress$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n\n          if (address) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new Error('Invalid Address: `string` is required');\n\n        case 3:\n          if (!(options.forceGoogleOnIos && _reactNative.Platform.OS === 'ios')) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", geocodeAddressGoogle(address, options));\n\n        case 5:\n          if (!(_native.default == null)) {\n            _context4.next = 9;\n            break;\n          }\n\n          if (!options.fallbackToGoogle) {\n            _context4.next = 8;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", geocodeAddressGoogle(address, options));\n\n        case 8:\n          throw new Error('Missing Native Module: Please check the module linking, ' + 'or set `fallbackToGoogle` in the init options.');\n\n        case 9:\n          _context4.prev = 9;\n\n          if (!(_reactNative.Platform.OS === 'ios' && options.regionIos)) {\n            _context4.next = 17;\n            break;\n          }\n\n          _options$regionIos = options.regionIos, center = _options$regionIos.center, radius = _options$regionIos.radius;\n          _context4.next = 14;\n          return _regenerator.default.awrap(_native.default.geocodeAddressInRegion(address, center.lat, center.lng, radius, options.locale || defaultOptions.locale, options.maxResults || defaultOptions.maxResults));\n\n        case 14:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 17:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context4.next = 23;\n            break;\n          }\n\n          _context4.next = 20;\n          return _regenerator.default.awrap(_native.default.geocodeAddressAndroid(address, options));\n\n        case 20:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 23:\n          _context4.next = 25;\n          return _regenerator.default.awrap(_native.default.geocodeAddress(address, options.locale || defaultOptions.locale, options.maxResults || defaultOptions.maxResults));\n\n        case 25:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 26:\n          _context4.next = 33;\n          break;\n\n        case 28:\n          _context4.prev = 28;\n          _context4.t0 = _context4[\"catch\"](9);\n\n          if (!options.fallbackToGoogle) {\n            _context4.next = 32;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", geocodeAddressGoogle(address, options));\n\n        case 32:\n          throw new Error('Native Error: ' + (_context4.t0 === null || _context4.t0 === void 0 ? void 0 : _context4.t0.message) || 'Unknown Execption.');\n\n        case 33:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[9, 28]], Promise);\n}\n\nvar _default = {\n  geocodePosition: geocodePosition,\n  geocodePositionGoogle: geocodePositionGoogle,\n  geocodeAddress: geocodeAddress,\n  geocodeAddressGoogle: geocodeAddressGoogle\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}