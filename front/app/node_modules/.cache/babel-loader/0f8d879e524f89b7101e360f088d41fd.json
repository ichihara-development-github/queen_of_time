{"ast":null,"code":"// // サーバー定義\n// const express = require(\"express\");\n// const socket = require(\"socket.io\")\n// const port = 5000;\n// var app = express()\n// var server = app.listen(port, function(){\n//     console.log(\"server is running\")\n// })\n// var io = socket(server)\n// // ソケット定義\n// // const io = new Server(server);\n// const ENDPOINT1 = process.env.REACT_APP_SOCKET_ENDPOINT1\n// // const ENDPOINT2 =  process.env.REACT_APP_SOCKET_ENDPOINT2\n// // let joinedSocket = new WebSocket(ENDPOINT2)\n// const currentJoinRoom = io.of(\"/current\");\n// // const joinedRoom = io.of(\"/joined\");\n// //-----------------------------------\n// io.on(\"connection\", (socket) => { // ブラウザから接続されたときの処理\n//     console.log(\"a user connected\");\n//     socket.on(\"disconnect\", () => { // ブラウザが切断したときの処理\n//         console.log(\"user disconnected\");\n//     });\n// });\n// currentJoinRoom.on(\"connect\", function(socket){\n//     console.log(\"connected current room\")\n//     socket.on(\"join\",function(roomId){\n//         socket.join(`room_${roomId}`);\n//     });\n//     socket.on(\"leave\",function(roomId){\n//         socket.leave(`room_${roomId}`)\n//     });\n//     socket.on(\"SEND_MESSAGE\",function(message){\n//         console.log(\"send\")\n//         io.of('/current').in(`room_${message.room_id}`).emit(\"RECIEVE_MESSAGE\", message)\n//     });\n//     socket.on(\"CANCEL_MESSAGE\",function(roomId,id){\n//         console.log(\"cancel send\")\n//         io.of('/current').in(`room_${roomId}`).emit(\"REMOVE_MESSAGE\", id)\n//     });\n//     socket.on(\"disconnect\", function(){\n//         console.log(\"disconnected\");\n//     });\n// })\n// // joinedRoom.on(\"connection\", function(socket){\n// //     socket.emit(\"getJoinedIds\")\n// //     console.log(\"joined\")\n// //     socket.on(\"reConnect\", function(ids){\n// //         ids.map(id => socket.join(`room_${id}`))\n// //         console.log(socket.rooms)\n// //     })\n// //     socket.on(\"join\",function(roomId){\n// //         socket.join(`room_${roomId}`);\n// //         console.log(socket.rooms)\n// //     })\n// //     socket.on(\"SEND_PUSH\",function(message){\n// //         console.log(\"push\")\n// //         console.log(socket.rooms)\n// //         socket.broadcast.to(`room_${message.room_id}`).emit(\"PUSH_MESSAGE\", message)\n// //     })\n// // })\nvar express = require('express');\n\nvar app = express();\n\nvar http = require('http');\n\nvar server = http.createServer(app);\napp.get('/', function (req, res) {\n  res.send('<h1>Hello world</h1>');\n});\nserver.listen(3000, function () {\n  console.log('listening on *:5000');\n});","map":{"version":3,"names":["express","require","app","http","server","createServer","get","req","res","send","listen","console","log"],"sources":["/usr/src/app/app/src/server/server.js"],"sourcesContent":["// // サーバー定義\r\n// const express = require(\"express\");\r\n// const socket = require(\"socket.io\")\r\n// const port = 5000;\r\n\r\n// var app = express()\r\n\r\n// var server = app.listen(port, function(){\r\n//     console.log(\"server is running\")\r\n// })\r\n// var io = socket(server)\r\n\r\n// // ソケット定義\r\n// // const io = new Server(server);\r\n\r\n// const ENDPOINT1 = process.env.REACT_APP_SOCKET_ENDPOINT1\r\n// // const ENDPOINT2 =  process.env.REACT_APP_SOCKET_ENDPOINT2\r\n// // let joinedSocket = new WebSocket(ENDPOINT2)\r\n\r\n// const currentJoinRoom = io.of(\"/current\");\r\n// // const joinedRoom = io.of(\"/joined\");\r\n\r\n// //-----------------------------------\r\n\r\n// io.on(\"connection\", (socket) => { // ブラウザから接続されたときの処理\r\n//     console.log(\"a user connected\");\r\n//     socket.on(\"disconnect\", () => { // ブラウザが切断したときの処理\r\n//         console.log(\"user disconnected\");\r\n//     });\r\n// });\r\n\r\n// currentJoinRoom.on(\"connect\", function(socket){\r\n//     console.log(\"connected current room\")\r\n\r\n//     socket.on(\"join\",function(roomId){\r\n//         socket.join(`room_${roomId}`);\r\n//     });\r\n\r\n//     socket.on(\"leave\",function(roomId){\r\n//         socket.leave(`room_${roomId}`)\r\n//     });\r\n    \r\n//     socket.on(\"SEND_MESSAGE\",function(message){\r\n//         console.log(\"send\")\r\n//         io.of('/current').in(`room_${message.room_id}`).emit(\"RECIEVE_MESSAGE\", message)\r\n//     });\r\n\r\n    \r\n//     socket.on(\"CANCEL_MESSAGE\",function(roomId,id){\r\n//         console.log(\"cancel send\")\r\n//         io.of('/current').in(`room_${roomId}`).emit(\"REMOVE_MESSAGE\", id)\r\n//     });\r\n\r\n//     socket.on(\"disconnect\", function(){\r\n//         console.log(\"disconnected\");\r\n//     });\r\n// })\r\n\r\n\r\n// // joinedRoom.on(\"connection\", function(socket){\r\n// //     socket.emit(\"getJoinedIds\")\r\n// //     console.log(\"joined\")\r\n\r\n// //     socket.on(\"reConnect\", function(ids){\r\n// //         ids.map(id => socket.join(`room_${id}`))\r\n// //         console.log(socket.rooms)\r\n// //     })\r\n   \r\n// //     socket.on(\"join\",function(roomId){\r\n// //         socket.join(`room_${roomId}`);\r\n// //         console.log(socket.rooms)\r\n      \r\n// //     })\r\n\r\n// //     socket.on(\"SEND_PUSH\",function(message){\r\n// //         console.log(\"push\")\r\n// //         console.log(socket.rooms)\r\n// //         socket.broadcast.to(`room_${message.room_id}`).emit(\"PUSH_MESSAGE\", message)\r\n// //     })\r\n\r\n// // })\r\n\r\nconst express = require('express');\r\nconst app = express();\r\nconst http = require('http');\r\nconst server = http.createServer(app);\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('<h1>Hello world</h1>');\r\n});\r\n\r\nserver.listen(3000, () => {\r\n  console.log('listening on *:5000');\r\n});"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,IAAMG,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,MAAM,GAAGD,IAAI,CAACE,YAAL,CAAkBH,GAAlB,CAAf;AAEAA,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;EACzBA,GAAG,CAACC,IAAJ,CAAS,sBAAT;AACD,CAFD;AAIAL,MAAM,CAACM,MAAP,CAAc,IAAd,EAAoB,YAAM;EACxBC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,CAFD"},"metadata":{},"sourceType":"module"}