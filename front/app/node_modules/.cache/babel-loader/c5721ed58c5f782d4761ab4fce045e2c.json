{"ast":null,"code":"\"use strict\"; // imported from https://github.com/socketio/engine.io-parser/tree/2.2.x\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayloadAsBinary = exports.encodePayloadAsBinary = exports.decodePayload = exports.encodePayload = exports.decodeBase64Packet = exports.decodePacket = exports.encodeBase64Packet = exports.encodePacket = exports.packets = exports.protocol = void 0;\n/**\n * Module dependencies.\n */\n\nvar utf8 = require('./utf8');\n/**\n * Current protocol version.\n */\n\n\nexports.protocol = 3;\n\nvar hasBinary = function hasBinary(packets) {\n  var _iterator = _createForOfIteratorHelper(packets),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var packet = _step.value;\n\n      if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n};\n/**\n * Packet types.\n */\n\n\nexports.packets = {\n  open: 0 // non-ws\n  ,\n  close: 1 // non-ws\n  ,\n  ping: 2,\n  pong: 3,\n  message: 4,\n  upgrade: 5,\n  noop: 6\n};\nvar packetslist = Object.keys(exports.packets);\n/**\n * Premade error packet.\n */\n\nvar err = {\n  type: 'error',\n  data: 'parser error'\n};\nvar EMPTY_BUFFER = Buffer.concat([]);\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nfunction encodePacket(packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  if (Buffer.isBuffer(packet.data)) {\n    return encodeBuffer(packet, supportsBinary, callback);\n  } else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {\n    return encodeBuffer({\n      type: packet.type,\n      data: arrayBufferToBuffer(packet.data)\n    }, supportsBinary, callback);\n  } // Sending data as a utf-8 string\n\n\n  var encoded = exports.packets[packet.type]; // data fragment is optional\n\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), {\n      strict: false\n    }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n}\n\nexports.encodePacket = encodePacket;\n;\n/**\n * Encode Buffer data\n */\n\nfunction encodeBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var typeBuffer = Buffer.allocUnsafe(1);\n  typeBuffer[0] = exports.packets[packet.type];\n  return callback(Buffer.concat([typeBuffer, data]));\n}\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\n\nfunction encodeBase64Packet(packet, callback) {\n  var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);\n  var message = 'b' + exports.packets[packet.type];\n  message += data.toString('base64');\n  return callback(message);\n}\n\nexports.encodeBase64Packet = encodeBase64Packet;\n;\n/**\n * Decodes a packet. Data also available as an ArrayBuffer if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nfunction decodePacket(data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n\n  var type; // String data\n\n  if (typeof data === 'string') {\n    type = data.charAt(0);\n\n    if (type === 'b') {\n      return decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n\n      if (data === false) {\n        return err;\n      }\n    }\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return {\n        type: packetslist[type],\n        data: data.substring(1)\n      };\n    } else {\n      return {\n        type: packetslist[type]\n      };\n    }\n  } // Binary data\n\n\n  if (binaryType === 'arraybuffer') {\n    // wrap Buffer/ArrayBuffer data into an Uint8Array\n    var intArray = new Uint8Array(data);\n    type = intArray[0];\n    return {\n      type: packetslist[type],\n      data: intArray.buffer.slice(1)\n    };\n  }\n\n  if (data instanceof ArrayBuffer) {\n    data = arrayBufferToBuffer(data);\n  }\n\n  type = data[0];\n  return {\n    type: packetslist[type],\n    data: data.slice(1)\n  };\n}\n\nexports.decodePacket = decodePacket;\n;\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, {\n      strict: false\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return data;\n}\n/**\n * Decodes a packet encoded in a base64 string.\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\n\nfunction decodeBase64Packet(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  var data = Buffer.from(msg.substr(1), 'base64');\n\n  if (binaryType === 'arraybuffer') {\n    var abv = new Uint8Array(data.length);\n\n    for (var i = 0; i < abv.length; i++) {\n      abv[i] = data[i];\n    } // @ts-ignore\n\n\n    data = abv.buffer;\n  }\n\n  return {\n    type: type,\n    data: data\n  };\n}\n\nexports.decodeBase64Packet = decodeBase64Packet;\n;\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nfunction encodePayload(packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  if (supportsBinary && hasBinary(packets)) {\n    return encodePayloadAsBinary(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function encodeOne(packet, doneCallback) {\n    encodePacket(packet, supportsBinary, false, function (message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(results.join(''));\n  });\n}\n\nexports.encodePayload = encodePayload;\n;\n\nfunction setLengthHeader(message) {\n  return message.length + ':' + message;\n}\n/**\n * Async array map using after\n */\n\n\nfunction map(ary, each, done) {\n  var results = new Array(ary.length);\n  var count = 0;\n\n  var _loop = function _loop(i) {\n    each(ary[i], function (error, msg) {\n      results[i] = msg;\n\n      if (++count === ary.length) {\n        done(null, results);\n      }\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    _loop(i);\n  }\n}\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\n\nfunction decodePayload(data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '',\n      n,\n      msg,\n      packet;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    } // @ts-ignore\n\n\n    if (length === '' || length != (n = Number(length))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var more = callback(packet, i + n, l);\n      if (false === more) return;\n    } // advance cursor\n\n\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n}\n\nexports.decodePayload = decodePayload;\n;\n/**\n *\n * Converts a buffer to a utf8.js encoded string\n *\n * @api private\n */\n\nfunction bufferToString(buffer) {\n  var str = '';\n\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    str += String.fromCharCode(buffer[i]);\n  }\n\n  return str;\n}\n/**\n *\n * Converts a utf8.js encoded string to a buffer\n *\n * @api private\n */\n\n\nfunction stringToBuffer(string) {\n  var buf = Buffer.allocUnsafe(string.length);\n\n  for (var i = 0, l = string.length; i < l; i++) {\n    buf.writeUInt8(string.charCodeAt(i), i);\n  }\n\n  return buf;\n}\n/**\n *\n * Converts an ArrayBuffer to a Buffer\n *\n * @api private\n */\n\n\nfunction arrayBufferToBuffer(data) {\n  // data is either an ArrayBuffer or ArrayBufferView.\n  var length = data.byteLength || data.length;\n  var offset = data.byteOffset || 0;\n  return Buffer.from(data.buffer || data, offset, length);\n}\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {Buffer} encoded payload\n * @api private\n */\n\n\nfunction encodePayloadAsBinary(packets, callback) {\n  if (!packets.length) {\n    return callback(EMPTY_BUFFER);\n  }\n\n  map(packets, encodeOneBinaryPacket, function (err, results) {\n    return callback(Buffer.concat(results));\n  });\n}\n\nexports.encodePayloadAsBinary = encodePayloadAsBinary;\n;\n\nfunction encodeOneBinaryPacket(p, doneCallback) {\n  function onBinaryPacketEncode(packet) {\n    var encodingLength = '' + packet.length;\n    var sizeBuffer;\n\n    if (typeof packet === 'string') {\n      sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n      sizeBuffer[0] = 0; // is a string (not true binary = 0)\n\n      for (var i = 0; i < encodingLength.length; i++) {\n        sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n      }\n\n      sizeBuffer[sizeBuffer.length - 1] = 255;\n      return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));\n    }\n\n    sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n    sizeBuffer[0] = 1; // is binary (true binary = 1)\n\n    for (var i = 0; i < encodingLength.length; i++) {\n      sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n    }\n\n    sizeBuffer[sizeBuffer.length - 1] = 255;\n    doneCallback(null, Buffer.concat([sizeBuffer, packet]));\n  }\n\n  encodePacket(p, true, true, onBinaryPacketEncode);\n}\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n\n * @param {Buffer} data, callback method\n * @api public\n */\n\n\nfunction decodePayloadAsBinary(data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n  var i;\n\n  while (bufferTail.length > 0) {\n    var strLen = '';\n    var isString = bufferTail[0] === 0;\n\n    for (i = 1;; i++) {\n      if (bufferTail[i] === 255) break; // 310 = char length of Number.MAX_VALUE\n\n      if (strLen.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      strLen += '' + bufferTail[i];\n    }\n\n    bufferTail = bufferTail.slice(strLen.length + 1);\n    var msgLength = parseInt(strLen, 10);\n    var msg = bufferTail.slice(1, msgLength + 1);\n    if (isString) msg = bufferToString(msg);\n    buffers.push(msg);\n    bufferTail = bufferTail.slice(msgLength + 1);\n  }\n\n  var total = buffers.length;\n\n  for (i = 0; i < total; i++) {\n    var buffer = buffers[i];\n    callback(decodePacket(buffer, binaryType, true), i, total);\n  }\n}\n\nexports.decodePayloadAsBinary = decodePayloadAsBinary;\n;","map":null,"metadata":{},"sourceType":"script"}