{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nvar events_1 = require(\"events\");\n\nvar parser_v4 = require(\"engine.io-parser\");\n\nvar parser_v3 = require(\"./parser-v3/index\");\n\nvar debug_1 = require(\"debug\");\n\nvar debug = (0, debug_1.default)(\"engine:transport\");\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n\nvar Transport = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Transport, _events_1$EventEmitte);\n\n  /**\n   * Transport constructor.\n   *\n   * @param {http.IncomingMessage} request\n   * @api public\n   */\n  function Transport(req) {\n    var _this;\n\n    _classCallCheck(this, Transport);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transport).call(this));\n    _this.readyState = \"open\";\n    _this.discarded = false;\n    _this.protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n\n    _this.parser = _this.protocol === 4 ? parser_v4 : parser_v3;\n    return _this;\n  }\n\n  _createClass(Transport, [{\n    key: \"discard\",\n\n    /**\n     * Flags the transport as discarded.\n     *\n     * @api private\n     */\n    value: function discard() {\n      this.discarded = true;\n    }\n    /**\n     * Called with an incoming HTTP request.\n     *\n     * @param {http.IncomingMessage} request\n     * @api protected\n     */\n\n  }, {\n    key: \"onRequest\",\n    value: function onRequest(req) {\n      debug(\"setting request\");\n      this.req = req;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(fn) {\n      if (\"closed\" === this.readyState || \"closing\" === this.readyState) return;\n      this.readyState = \"closing\";\n      this.doClose(fn || noop);\n    }\n    /**\n     * Called with a transport error.\n     *\n     * @param {String} message error\n     * @param {Object} error description\n     * @api protected\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(msg, desc) {\n      if (this.listeners(\"error\").length) {\n        var err = new Error(msg); // @ts-ignore\n\n        err.type = \"TransportError\"; // @ts-ignore\n\n        err.description = desc;\n        this.emit(\"error\", err);\n      } else {\n        debug(\"ignored transport error %s (%s)\", msg, desc);\n      }\n    }\n    /**\n     * Called with parsed out a packets from the data stream.\n     *\n     * @param {Object} packet\n     * @api protected\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      this.emit(\"packet\", packet);\n    }\n    /**\n     * Called with the encoded packet data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      this.onPacket(this.parser.decodePacket(data));\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api protected\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.readyState = \"closed\";\n      this.emit(\"close\");\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    },\n    set: function set(state) {\n      debug(\"readyState updated from %s to %s (%s)\", this._readyState, state, this.name);\n      this._readyState = state;\n    }\n  }]);\n\n  return Transport;\n}(events_1.EventEmitter);\n\nexports.Transport = Transport;","map":null,"metadata":{},"sourceType":"script"}