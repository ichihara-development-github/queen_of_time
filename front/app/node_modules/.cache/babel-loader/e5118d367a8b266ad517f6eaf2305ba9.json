{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable class-methods-use-this */\n\nimport defaultDayjs from 'dayjs';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\nimport localizedFormatPlugin from 'dayjs/plugin/localizedFormat';\nimport isBetweenPlugin from 'dayjs/plugin/isBetween';\nimport { buildWarning } from '../internals/utils/warning';\ndefaultDayjs.extend(customParseFormatPlugin);\ndefaultDayjs.extend(localizedFormatPlugin);\ndefaultDayjs.extend(isBetweenPlugin);\nvar localeNotFoundWarning = buildWarning(['Your locale has not been found.', 'Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale', \"Or you forget to import the locale from 'dayjs/locale/{localeUsed}'\", 'fallback on English locale']);\nvar formatTokenMap = {\n  // Year\n  YY: 'year',\n  YYYY: {\n    sectionType: 'year',\n    contentType: 'digit',\n    maxLength: 4\n  },\n  // Month\n  M: {\n    sectionType: 'month',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  MM: 'month',\n  MMM: {\n    sectionType: 'month',\n    contentType: 'letter'\n  },\n  MMMM: {\n    sectionType: 'month',\n    contentType: 'letter'\n  },\n  // Day of the month\n  D: {\n    sectionType: 'day',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  DD: 'day',\n  Do: {\n    sectionType: 'day',\n    contentType: 'digit-with-letter'\n  },\n  // Day of the week\n  d: {\n    sectionType: 'weekDay',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  dd: {\n    sectionType: 'weekDay',\n    contentType: 'letter'\n  },\n  ddd: {\n    sectionType: 'weekDay',\n    contentType: 'letter'\n  },\n  dddd: {\n    sectionType: 'weekDay',\n    contentType: 'letter'\n  },\n  // Meridiem\n  A: 'meridiem',\n  a: 'meridiem',\n  // Hours\n  H: {\n    sectionType: 'hours',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  HH: 'hours',\n  h: {\n    sectionType: 'hours',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  hh: 'hours',\n  // Minutes\n  m: {\n    sectionType: 'minutes',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  mm: 'minutes',\n  // Seconds\n  s: {\n    sectionType: 'seconds',\n    contentType: 'digit',\n    maxLength: 2\n  },\n  ss: 'seconds'\n};\nvar defaultFormats = {\n  year: 'YYYY',\n  month: 'MMMM',\n  monthShort: 'MMM',\n  dayOfMonth: 'D',\n  weekday: 'dddd',\n  weekdayShort: 'ddd',\n  hours24h: 'HH',\n  hours12h: 'hh',\n  meridiem: 'A',\n  minutes: 'mm',\n  seconds: 'ss',\n  fullDate: 'll',\n  fullDateWithWeekday: 'dddd, LL',\n  keyboardDate: 'L',\n  shortDate: 'MMM D',\n  normalDate: 'D MMMM',\n  normalDateWithWeekday: 'ddd, MMM D',\n  monthAndYear: 'MMMM YYYY',\n  monthAndDate: 'MMMM D',\n  fullTime: 'LT',\n  fullTime12h: 'hh:mm A',\n  fullTime24h: 'HH:mm',\n  fullDateTime: 'lll',\n  fullDateTime12h: 'll hh:mm A',\n  fullDateTime24h: 'll HH:mm',\n  keyboardDateTime: 'L LT',\n  keyboardDateTime12h: 'L hh:mm A',\n  keyboardDateTime24h: 'L HH:mm'\n};\nvar MISSING_UTC_PLUGIN = ['Missing UTC plugin', 'To be able to use UTC or timezones, you have to enable the `utc` plugin', 'Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc'].join('\\n');\nvar MISSING_TIMEZONE_PLUGIN = ['Missing timezone plugin', 'To be able to use timezones, you have to enable both the `utc` and the `timezone` plugin', 'Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone'].join('\\n');\n\nvar withLocale = function withLocale(dayjs, locale) {\n  return !locale ? dayjs : function () {\n    return dayjs.apply(void 0, arguments).locale(locale);\n  };\n};\n/**\n * Based on `@date-io/dayjs`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\nexport var AdapterDayjs = function AdapterDayjs() {\n  var _this = this;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _locale = _ref.locale,\n      formats = _ref.formats,\n      instance = _ref.instance;\n\n  _classCallCheck(this, AdapterDayjs);\n\n  var _this$rawDayJsInstanc;\n\n  this.isMUIAdapter = true;\n  this.isTimezoneCompatible = true;\n  this.lib = 'dayjs';\n  this.rawDayJsInstance = void 0;\n  this.dayjs = void 0;\n  this.locale = void 0;\n  this.formats = void 0;\n  this.escapedCharacters = {\n    start: '[',\n    end: ']'\n  };\n  this.formatTokenMap = formatTokenMap;\n\n  this.setLocaleToValue = function (value) {\n    var expectedLocale = _this.getCurrentLocaleCode();\n\n    if (expectedLocale === value.locale()) {\n      return value;\n    }\n\n    return value.locale(expectedLocale);\n  };\n\n  this.hasUTCPlugin = function () {\n    return typeof defaultDayjs.utc !== 'undefined';\n  };\n\n  this.hasTimezonePlugin = function () {\n    return typeof defaultDayjs.tz !== 'undefined';\n  };\n\n  this.isSame = function (value, comparing, comparisonTemplate) {\n    var comparingInValueTimezone = _this.setTimezone(comparing, _this.getTimezone(value));\n\n    return value.format(comparisonTemplate) === comparingInValueTimezone.format(comparisonTemplate);\n  };\n  /**\n   * Replaces \"default\" by undefined and \"system\" by the system timezone before passing it to `dayjs`.\n   */\n\n\n  this.cleanTimezone = function (timezone) {\n    switch (timezone) {\n      case 'default':\n        {\n          return undefined;\n        }\n\n      case 'system':\n        {\n          return defaultDayjs.tz.guess();\n        }\n\n      default:\n        {\n          return timezone;\n        }\n    }\n  };\n\n  this.createSystemDate = function (value) {\n    // TODO v7: Stop using `this.rawDayJsInstance` (drop the `instance` param on the adapters)\n\n    /* istanbul ignore next */\n    if (_this.rawDayJsInstance) {\n      return _this.rawDayJsInstance(value);\n    }\n\n    if (_this.hasUTCPlugin() && _this.hasTimezonePlugin()) {\n      var timezone = defaultDayjs.tz.guess(); // We can't change the system timezone in the tests\n\n      /* istanbul ignore next */\n\n      if (timezone !== 'UTC') {\n        return defaultDayjs.tz(value, timezone);\n      }\n\n      return defaultDayjs(value);\n    }\n\n    return defaultDayjs(value);\n  };\n\n  this.createUTCDate = function (value) {\n    /* istanbul ignore next */\n    if (!_this.hasUTCPlugin()) {\n      throw new Error(MISSING_UTC_PLUGIN);\n    }\n\n    return defaultDayjs.utc(value);\n  };\n\n  this.createTZDate = function (value, timezone) {\n    /* istanbul ignore next */\n    if (!_this.hasUTCPlugin()) {\n      throw new Error(MISSING_UTC_PLUGIN);\n    }\n    /* istanbul ignore next */\n\n\n    if (!_this.hasTimezonePlugin()) {\n      throw new Error(MISSING_TIMEZONE_PLUGIN);\n    }\n\n    var keepLocalTime = value !== undefined && !value.endsWith('Z');\n    return defaultDayjs(value).tz(_this.cleanTimezone(timezone), keepLocalTime);\n  };\n\n  this.getLocaleFormats = function () {\n    var locales = defaultDayjs.Ls;\n    var locale = _this.locale || 'en';\n    var localeObject = locales[locale];\n\n    if (localeObject === undefined) {\n      localeNotFoundWarning();\n      localeObject = locales.en;\n    }\n\n    return localeObject.formats;\n  };\n  /**\n   * If the new day does not have the same offset as the old one (when switching to summer day time for example),\n   * Then dayjs will not automatically adjust the offset (moment does).\n   * We have to parse again the value to make sure the `fixOffset` method is applied.\n   * See https://github.com/iamkun/dayjs/blob/b3624de619d6e734cd0ffdbbd3502185041c1b60/src/plugin/timezone/index.js#L72\n   */\n\n\n  this.adjustOffset = function (value) {\n    if (!_this.hasTimezonePlugin()) {\n      return value;\n    }\n\n    var timezone = _this.getTimezone(value);\n\n    if (timezone !== 'UTC') {\n      var _fixedValue$$offset, _value$$offset;\n\n      var fixedValue = value.tz(_this.cleanTimezone(timezone), true); // @ts-ignore\n\n      if (((_fixedValue$$offset = fixedValue.$offset) != null ? _fixedValue$$offset : 0) === ((_value$$offset = value.$offset) != null ? _value$$offset : 0)) {\n        return value;\n      }\n\n      return fixedValue;\n    }\n\n    return value;\n  };\n\n  this.date = function (value) {\n    if (value === null) {\n      return null;\n    }\n\n    return _this.dayjs(value);\n  };\n\n  this.dateWithTimezone = function (value, timezone) {\n    if (value === null) {\n      return null;\n    }\n\n    var parsedValue;\n\n    if (timezone === 'UTC') {\n      parsedValue = _this.createUTCDate(value);\n    } else if (timezone === 'system' || timezone === 'default' && !_this.hasTimezonePlugin()) {\n      parsedValue = _this.createSystemDate(value);\n    } else {\n      parsedValue = _this.createTZDate(value, timezone);\n    }\n\n    if (_this.locale === undefined) {\n      return parsedValue;\n    }\n\n    return parsedValue.locale(_this.locale);\n  };\n\n  this.getTimezone = function (value) {\n    if (_this.hasUTCPlugin() && value.isUTC()) {\n      return 'UTC';\n    }\n\n    if (_this.hasTimezonePlugin()) {\n      var _value$$x; // @ts-ignore\n\n\n      var zone = (_value$$x = value.$x) == null ? void 0 : _value$$x.$timezone;\n      return zone != null ? zone : 'system';\n    }\n\n    return 'system';\n  };\n\n  this.setTimezone = function (value, timezone) {\n    if (_this.getTimezone(value) === timezone) {\n      return value;\n    }\n\n    if (timezone === 'UTC') {\n      /* istanbul ignore next */\n      if (!_this.hasUTCPlugin()) {\n        throw new Error(MISSING_UTC_PLUGIN);\n      }\n\n      return value.utc();\n    } // We know that we have the UTC plugin.\n    // Otherwise, the value timezone would always equal \"system\".\n    // And it would be caught by the first \"if\" of this method.\n\n\n    if (timezone === 'system') {\n      return value.local();\n    }\n\n    if (!_this.hasTimezonePlugin()) {\n      if (timezone === 'default') {\n        return value;\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(MISSING_TIMEZONE_PLUGIN);\n    }\n\n    return defaultDayjs.tz(value, _this.cleanTimezone(timezone));\n  };\n\n  this.toJsDate = function (value) {\n    return value.toDate();\n  };\n\n  this.parseISO = function (isoString) {\n    return _this.dayjs(isoString);\n  };\n\n  this.toISO = function (value) {\n    return value.toISOString();\n  };\n\n  this.parse = function (value, format) {\n    if (value === '') {\n      return null;\n    }\n\n    return _this.dayjs(value, format, _this.locale, true);\n  };\n\n  this.getCurrentLocaleCode = function () {\n    return _this.locale || 'en';\n  };\n\n  this.is12HourCycleInCurrentLocale = function () {\n    /* istanbul ignore next */\n    return /A|a/.test(_this.getLocaleFormats().LT || '');\n  };\n\n  this.expandFormat = function (format) {\n    var localeFormats = _this.getLocaleFormats(); // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js\n\n\n    var t = function t(formatBis) {\n      return formatBis.replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g, function (_, a, b) {\n        return a || b.slice(1);\n      });\n    };\n\n    return format.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (_, a, b) {\n      var B = b && b.toUpperCase();\n      return a || localeFormats[b] || t(localeFormats[B]);\n    });\n  };\n\n  this.getFormatHelperText = function (format) {\n    return _this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n  };\n\n  this.isNull = function (value) {\n    return value === null;\n  };\n\n  this.isValid = function (value) {\n    return _this.dayjs(value).isValid();\n  };\n\n  this.format = function (value, formatKey) {\n    return _this.formatByString(value, _this.formats[formatKey]);\n  };\n\n  this.formatByString = function (value, formatString) {\n    return _this.dayjs(value).format(formatString);\n  };\n\n  this.formatNumber = function (numberToFormat) {\n    return numberToFormat;\n  };\n\n  this.getDiff = function (value, comparing, unit) {\n    return value.diff(comparing, unit);\n  };\n\n  this.isEqual = function (value, comparing) {\n    if (value === null && comparing === null) {\n      return true;\n    }\n\n    return _this.dayjs(value).toDate().getTime() === _this.dayjs(comparing).toDate().getTime();\n  };\n\n  this.isSameYear = function (value, comparing) {\n    return _this.isSame(value, comparing, 'YYYY');\n  };\n\n  this.isSameMonth = function (value, comparing) {\n    return _this.isSame(value, comparing, 'YYYY-MM');\n  };\n\n  this.isSameDay = function (value, comparing) {\n    return _this.isSame(value, comparing, 'YYYY-MM-DD');\n  };\n\n  this.isSameHour = function (value, comparing) {\n    return value.isSame(comparing, 'hour');\n  };\n\n  this.isAfter = function (value, comparing) {\n    return value > comparing;\n  };\n\n  this.isAfterYear = function (value, comparing) {\n    if (!_this.hasUTCPlugin()) {\n      return value.isAfter(comparing, 'year');\n    }\n\n    return !_this.isSameYear(value, comparing) && value.utc() > comparing.utc();\n  };\n\n  this.isAfterDay = function (value, comparing) {\n    if (!_this.hasUTCPlugin()) {\n      return value.isAfter(comparing, 'day');\n    }\n\n    return !_this.isSameDay(value, comparing) && value.utc() > comparing.utc();\n  };\n\n  this.isBefore = function (value, comparing) {\n    return value < comparing;\n  };\n\n  this.isBeforeYear = function (value, comparing) {\n    if (!_this.hasUTCPlugin()) {\n      return value.isBefore(comparing, 'year');\n    }\n\n    return !_this.isSameYear(value, comparing) && value.utc() < comparing.utc();\n  };\n\n  this.isBeforeDay = function (value, comparing) {\n    if (!_this.hasUTCPlugin()) {\n      return value.isBefore(comparing, 'day');\n    }\n\n    return !_this.isSameDay(value, comparing) && value.utc() < comparing.utc();\n  };\n\n  this.isWithinRange = function (value, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        start = _ref3[0],\n        end = _ref3[1];\n\n    return value >= start && value <= end;\n  };\n\n  this.startOfYear = function (value) {\n    return _this.adjustOffset(value.startOf('year'));\n  };\n\n  this.startOfMonth = function (value) {\n    return _this.adjustOffset(value.startOf('month'));\n  };\n\n  this.startOfWeek = function (value) {\n    return _this.adjustOffset(value.startOf('week'));\n  };\n\n  this.startOfDay = function (value) {\n    return _this.adjustOffset(value.startOf('day'));\n  };\n\n  this.endOfYear = function (value) {\n    return _this.adjustOffset(value.endOf('year'));\n  };\n\n  this.endOfMonth = function (value) {\n    return _this.adjustOffset(value.endOf('month'));\n  };\n\n  this.endOfWeek = function (value) {\n    return _this.adjustOffset(value.endOf('week'));\n  };\n\n  this.endOfDay = function (value) {\n    return _this.adjustOffset(value.endOf('day'));\n  };\n\n  this.addYears = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'year') : value.add(amount, 'year'));\n  };\n\n  this.addMonths = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'month') : value.add(amount, 'month'));\n  };\n\n  this.addWeeks = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'week') : value.add(amount, 'week'));\n  };\n\n  this.addDays = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'day') : value.add(amount, 'day'));\n  };\n\n  this.addHours = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'hour') : value.add(amount, 'hour'));\n  };\n\n  this.addMinutes = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'minute') : value.add(amount, 'minute'));\n  };\n\n  this.addSeconds = function (value, amount) {\n    return _this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'second') : value.add(amount, 'second'));\n  };\n\n  this.getYear = function (value) {\n    return value.year();\n  };\n\n  this.getMonth = function (value) {\n    return value.month();\n  };\n\n  this.getDate = function (value) {\n    return value.date();\n  };\n\n  this.getHours = function (value) {\n    return value.hour();\n  };\n\n  this.getMinutes = function (value) {\n    return value.minute();\n  };\n\n  this.getSeconds = function (value) {\n    return value.second();\n  };\n\n  this.getMilliseconds = function (value) {\n    return value.millisecond();\n  };\n\n  this.setYear = function (value, year) {\n    return _this.adjustOffset(value.set('year', year));\n  };\n\n  this.setMonth = function (value, month) {\n    return _this.adjustOffset(value.set('month', month));\n  };\n\n  this.setDate = function (value, date) {\n    return _this.adjustOffset(value.set('date', date));\n  };\n\n  this.setHours = function (value, hours) {\n    return _this.adjustOffset(value.set('hour', hours));\n  };\n\n  this.setMinutes = function (value, minutes) {\n    return _this.adjustOffset(value.set('minute', minutes));\n  };\n\n  this.setSeconds = function (value, seconds) {\n    return _this.adjustOffset(value.set('second', seconds));\n  };\n\n  this.setMilliseconds = function (value, milliseconds) {\n    return _this.adjustOffset(value.set('millisecond', milliseconds));\n  };\n\n  this.getDaysInMonth = function (value) {\n    return value.daysInMonth();\n  };\n\n  this.getNextMonth = function (value) {\n    return _this.addMonths(value, 1);\n  };\n\n  this.getPreviousMonth = function (value) {\n    return _this.addMonths(value, -1);\n  };\n\n  this.getMonthArray = function (value) {\n    var firstMonth = value.startOf('year');\n    var monthArray = [firstMonth];\n\n    while (monthArray.length < 12) {\n      var prevMonth = monthArray[monthArray.length - 1];\n      monthArray.push(_this.addMonths(prevMonth, 1));\n    }\n\n    return monthArray;\n  };\n\n  this.mergeDateAndTime = function (dateParam, timeParam) {\n    return dateParam.hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());\n  };\n\n  this.getWeekdays = function () {\n    var start = _this.dayjs().startOf('week');\n\n    return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {\n      return _this.formatByString(_this.addDays(start, diff), 'dd');\n    });\n  };\n\n  this.getWeekArray = function (value) {\n    var cleanValue = _this.setLocaleToValue(value);\n\n    var start = cleanValue.startOf('month').startOf('week');\n    var end = cleanValue.endOf('month').endOf('week');\n    var count = 0;\n    var current = start;\n    var nestedWeeks = [];\n\n    while (current < end) {\n      var weekNumber = Math.floor(count / 7);\n      nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n      nestedWeeks[weekNumber].push(current);\n      current = _this.addDays(current, 1);\n      count += 1;\n    }\n\n    return nestedWeeks;\n  };\n\n  this.getWeekNumber = function (value) {\n    return value.week();\n  };\n\n  this.getYearRange = function (start, end) {\n    var startDate = start.startOf('year');\n    var endDate = end.endOf('year');\n    var years = [];\n    var current = startDate;\n\n    while (current < endDate) {\n      years.push(current);\n      current = _this.addYears(current, 1);\n    }\n\n    return years;\n  };\n\n  this.getMeridiemText = function (ampm) {\n    return ampm === 'am' ? 'AM' : 'PM';\n  };\n\n  this.rawDayJsInstance = instance;\n  this.dayjs = withLocale((_this$rawDayJsInstanc = this.rawDayJsInstance) != null ? _this$rawDayJsInstanc : defaultDayjs, _locale);\n  this.locale = _locale;\n  this.formats = _extends({}, defaultFormats, formats);\n  defaultDayjs.extend(weekOfYear);\n};","map":null,"metadata":{},"sourceType":"module"}