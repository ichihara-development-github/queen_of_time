{"ast":null,"code":"import { areViewsEqual } from './views';\nvar timeViews = ['hours', 'minutes', 'seconds'];\nexport var isTimeView = function isTimeView(view) {\n  return timeViews.includes(view);\n};\nexport var isInternalTimeView = function isInternalTimeView(view) {\n  return timeViews.includes(view) || view === 'meridiem';\n};\nexport var getMeridiem = function getMeridiem(date, utils) {\n  if (!date) {\n    return null;\n  }\n\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\nexport var convertValueToMeridiem = function convertValueToMeridiem(value, meridiem, ampm) {\n  if (ampm) {\n    var currentMeridiem = value >= 12 ? 'pm' : 'am';\n\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n\n  return value;\n};\nexport var convertToMeridiem = function convertToMeridiem(time, meridiem, ampm, utils) {\n  var newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\nexport var getSecondsInDay = function getSecondsInDay(date, utils) {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n};\nexport var createIsAfterIgnoreDatePart = function createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils) {\n  return function (dateLeft, dateRight) {\n    if (disableIgnoringDatePartForTimeValidation) {\n      return utils.isAfter(dateLeft, dateRight);\n    }\n\n    return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n  };\n};\nexport var resolveTimeFormat = function resolveTimeFormat(utils, _ref) {\n  var format = _ref.format,\n      views = _ref.views,\n      ampm = _ref.ampm;\n\n  if (format != null) {\n    return format;\n  }\n\n  var formats = utils.formats;\n\n  if (areViewsEqual(views, ['hours'])) {\n    return ampm ? \"\".concat(formats.hours12h, \" \").concat(formats.meridiem) : formats.hours24h;\n  }\n\n  if (areViewsEqual(views, ['minutes'])) {\n    return formats.minutes;\n  }\n\n  if (areViewsEqual(views, ['seconds'])) {\n    return formats.seconds;\n  }\n\n  if (areViewsEqual(views, ['minutes', 'seconds'])) {\n    return \"\".concat(formats.minutes, \":\").concat(formats.seconds);\n  }\n\n  if (areViewsEqual(views, ['hours', 'minutes', 'seconds'])) {\n    return ampm ? \"\".concat(formats.hours12h, \":\").concat(formats.minutes, \":\").concat(formats.seconds, \" \").concat(formats.meridiem) : \"\".concat(formats.hours24h, \":\").concat(formats.minutes, \":\").concat(formats.seconds);\n  }\n\n  return ampm ? \"\".concat(formats.hours12h, \":\").concat(formats.minutes, \" \").concat(formats.meridiem) : \"\".concat(formats.hours24h, \":\").concat(formats.minutes);\n};","map":null,"metadata":{},"sourceType":"module"}