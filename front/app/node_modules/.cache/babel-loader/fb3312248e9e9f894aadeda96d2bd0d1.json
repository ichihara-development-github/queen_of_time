{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nvar events_1 = require(\"events\");\n\nvar debug_1 = require(\"debug\");\n\nvar timers_1 = require(\"timers\");\n\nvar debug = (0, debug_1.default)(\"engine:socket\");\n\nvar Socket = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Socket, _events_1$EventEmitte);\n\n  /**\n   * Client class (abstract).\n   *\n   * @api private\n   */\n  function Socket(id, server, transport, req, protocol) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Socket).call(this));\n    _this.id = id;\n    _this.server = server;\n    _this.upgrading = false;\n    _this.upgraded = false;\n    _this.readyState = \"opening\";\n    _this.writeBuffer = [];\n    _this.packetsFn = [];\n    _this.sentCallbackFn = [];\n    _this.cleanupFn = [];\n    _this.request = req;\n    _this.protocol = protocol; // Cache IP since it might not be in the req later\n\n    if (req.websocket && req.websocket._socket) {\n      _this.remoteAddress = req.websocket._socket.remoteAddress;\n    } else {\n      _this.remoteAddress = req.connection.remoteAddress;\n    }\n\n    _this.checkIntervalTimer = null;\n    _this.upgradeTimeoutTimer = null;\n    _this.pingTimeoutTimer = null;\n    _this.pingIntervalTimer = null;\n\n    _this.setTransport(transport);\n\n    _this.onOpen();\n\n    return _this;\n  }\n\n  _createClass(Socket, [{\n    key: \"onOpen\",\n\n    /**\n     * Called upon transport considered open.\n     *\n     * @api private\n     */\n    value: function onOpen() {\n      this.readyState = \"open\"; // sends an `open` packet\n\n      this.transport.sid = this.id;\n      this.sendPacket(\"open\", JSON.stringify({\n        sid: this.id,\n        upgrades: this.getAvailableUpgrades(),\n        pingInterval: this.server.opts.pingInterval,\n        pingTimeout: this.server.opts.pingTimeout,\n        maxPayload: this.server.opts.maxHttpBufferSize\n      }));\n\n      if (this.server.opts.initialPacket) {\n        this.sendPacket(\"message\", this.server.opts.initialPacket);\n      }\n\n      this.emit(\"open\");\n\n      if (this.protocol === 3) {\n        // in protocol v3, the client sends a ping, and the server answers with a pong\n        this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\n      } else {\n        // in protocol v4, the server sends a ping, and the client answers with a pong\n        this.schedulePing();\n      }\n    }\n    /**\n     * Called upon transport packet.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"open\" !== this.readyState) {\n        return debug(\"packet received with closed socket\");\n      } // export packet event\n\n\n      debug(\"received packet \".concat(packet.type));\n      this.emit(\"packet\", packet); // Reset ping timeout on any packet, incoming data is a good sign of\n      // other side's liveness\n\n      this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\n\n      switch (packet.type) {\n        case \"ping\":\n          if (this.transport.protocol !== 3) {\n            this.onError(\"invalid heartbeat direction\");\n            return;\n          }\n\n          debug(\"got ping\");\n          this.sendPacket(\"pong\");\n          this.emit(\"heartbeat\");\n          break;\n\n        case \"pong\":\n          if (this.transport.protocol === 3) {\n            this.onError(\"invalid heartbeat direction\");\n            return;\n          }\n\n          debug(\"got pong\");\n          this.pingIntervalTimer.refresh();\n          this.emit(\"heartbeat\");\n          break;\n\n        case \"error\":\n          this.onClose(\"parse error\");\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    }\n    /**\n     * Called upon transport error.\n     *\n     * @param {Error} error object\n     * @api private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"transport error\");\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Pings client every `this.pingInterval` and expects response\n     * within `this.pingTimeout` or closes connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"schedulePing\",\n    value: function schedulePing() {\n      var _this2 = this;\n\n      this.pingIntervalTimer = (0, timers_1.setTimeout)(function () {\n        debug(\"writing ping packet - expecting pong within %sms\", _this2.server.opts.pingTimeout);\n\n        _this2.sendPacket(\"ping\");\n\n        _this2.resetPingTimeout(_this2.server.opts.pingTimeout);\n      }, this.server.opts.pingInterval);\n    }\n    /**\n     * Resets ping timeout.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout(timeout) {\n      var _this3 = this;\n\n      (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = (0, timers_1.setTimeout)(function () {\n        if (_this3.readyState === \"closed\") return;\n\n        _this3.onClose(\"ping timeout\");\n      }, timeout);\n    }\n    /**\n     * Attaches handlers for the given transport.\n     *\n     * @param {Transport} transport\n     * @api private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var onError = this.onError.bind(this);\n      var onPacket = this.onPacket.bind(this);\n      var flush = this.flush.bind(this);\n      var onClose = this.onClose.bind(this, \"transport close\");\n      this.transport = transport;\n      this.transport.once(\"error\", onError);\n      this.transport.on(\"packet\", onPacket);\n      this.transport.on(\"drain\", flush);\n      this.transport.once(\"close\", onClose); // this function will manage packet events (also message callbacks)\n\n      this.setupSendCallback();\n      this.cleanupFn.push(function () {\n        transport.removeListener(\"error\", onError);\n        transport.removeListener(\"packet\", onPacket);\n        transport.removeListener(\"drain\", flush);\n        transport.removeListener(\"close\", onClose);\n      });\n    }\n    /**\n     * Upgrades socket to the given transport\n     *\n     * @param {Transport} transport\n     * @api private\n     */\n\n  }, {\n    key: \"maybeUpgrade\",\n    value: function maybeUpgrade(transport) {\n      var _this4 = this;\n\n      debug('might upgrade socket transport from \"%s\" to \"%s\"', this.transport.name, transport.name);\n      this.upgrading = true; // set transport upgrade timer\n\n      this.upgradeTimeoutTimer = (0, timers_1.setTimeout)(function () {\n        debug(\"client did not complete upgrade - closing transport\");\n        cleanup();\n\n        if (\"open\" === transport.readyState) {\n          transport.close();\n        }\n      }, this.server.opts.upgradeTimeout);\n\n      var onPacket = function onPacket(packet) {\n        if (\"ping\" === packet.type && \"probe\" === packet.data) {\n          debug(\"got probe ping packet, sending pong\");\n          transport.send([{\n            type: \"pong\",\n            data: \"probe\"\n          }]);\n\n          _this4.emit(\"upgrading\", transport);\n\n          clearInterval(_this4.checkIntervalTimer);\n          _this4.checkIntervalTimer = setInterval(check, 100);\n        } else if (\"upgrade\" === packet.type && _this4.readyState !== \"closed\") {\n          debug(\"got upgrade packet - upgrading\");\n          cleanup();\n\n          _this4.transport.discard();\n\n          _this4.upgraded = true;\n\n          _this4.clearTransport();\n\n          _this4.setTransport(transport);\n\n          _this4.emit(\"upgrade\", transport);\n\n          _this4.flush();\n\n          if (_this4.readyState === \"closing\") {\n            transport.close(function () {\n              _this4.onClose(\"forced close\");\n            });\n          }\n        } else {\n          cleanup();\n          transport.close();\n        }\n      }; // we force a polling cycle to ensure a fast upgrade\n\n\n      var check = function check() {\n        if (\"polling\" === _this4.transport.name && _this4.transport.writable) {\n          debug(\"writing a noop packet to polling for fast upgrade\");\n\n          _this4.transport.send([{\n            type: \"noop\"\n          }]);\n        }\n      };\n\n      var cleanup = function cleanup() {\n        _this4.upgrading = false;\n        clearInterval(_this4.checkIntervalTimer);\n        _this4.checkIntervalTimer = null;\n        (0, timers_1.clearTimeout)(_this4.upgradeTimeoutTimer);\n        _this4.upgradeTimeoutTimer = null;\n        transport.removeListener(\"packet\", onPacket);\n        transport.removeListener(\"close\", onTransportClose);\n        transport.removeListener(\"error\", onError);\n\n        _this4.removeListener(\"close\", onClose);\n      };\n\n      var onError = function onError(err) {\n        debug(\"client did not complete upgrade - %s\", err);\n        cleanup();\n        transport.close();\n        transport = null;\n      };\n\n      var onTransportClose = function onTransportClose() {\n        onError(\"transport closed\");\n      };\n\n      var onClose = function onClose() {\n        onError(\"socket closed\");\n      };\n\n      transport.on(\"packet\", onPacket);\n      transport.once(\"close\", onTransportClose);\n      transport.once(\"error\", onError);\n      this.once(\"close\", onClose);\n    }\n    /**\n     * Clears listeners and timers associated with current transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"clearTransport\",\n    value: function clearTransport() {\n      var cleanup;\n      var toCleanUp = this.cleanupFn.length;\n\n      for (var i = 0; i < toCleanUp; i++) {\n        cleanup = this.cleanupFn.shift();\n        cleanup();\n      } // silence further transport errors and prevent uncaught exceptions\n\n\n      this.transport.on(\"error\", function () {\n        debug(\"error triggered by discarded transport\");\n      }); // ensure transport won't stay open\n\n      this.transport.close();\n      (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n    }\n    /**\n     * Called upon transport considered closed.\n     * Possible reasons: `ping timeout`, `client error`, `parse error`,\n     * `transport error`, `server close`, `transport close`\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, description) {\n      var _this5 = this;\n\n      if (\"closed\" !== this.readyState) {\n        this.readyState = \"closed\"; // clear timers\n\n        (0, timers_1.clearTimeout)(this.pingIntervalTimer);\n        (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n        clearInterval(this.checkIntervalTimer);\n        this.checkIntervalTimer = null;\n        (0, timers_1.clearTimeout)(this.upgradeTimeoutTimer); // clean writeBuffer in next tick, so developers can still\n        // grab the writeBuffer on 'close' event\n\n        process.nextTick(function () {\n          _this5.writeBuffer = [];\n        });\n        this.packetsFn = [];\n        this.sentCallbackFn = [];\n        this.clearTransport();\n        this.emit(\"close\", reason, description);\n      }\n    }\n    /**\n     * Setup and manage send callback\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"setupSendCallback\",\n    value: function setupSendCallback() {\n      var _this6 = this;\n\n      // the message was sent successfully, execute the callback\n      var onDrain = function onDrain() {\n        if (_this6.sentCallbackFn.length > 0) {\n          var seqFn = _this6.sentCallbackFn.splice(0, 1)[0];\n\n          if (\"function\" === typeof seqFn) {\n            debug(\"executing send callback\");\n            seqFn(_this6.transport);\n          } else if (Array.isArray(seqFn)) {\n            debug(\"executing batch send callback\");\n            var l = seqFn.length;\n            var i = 0;\n\n            for (; i < l; i++) {\n              if (\"function\" === typeof seqFn[i]) {\n                seqFn[i](_this6.transport);\n              }\n            }\n          }\n        }\n      };\n\n      this.transport.on(\"drain\", onDrain);\n      this.cleanupFn.push(function () {\n        _this6.transport.removeListener(\"drain\", onDrain);\n      });\n    }\n    /**\n     * Sends a message packet.\n     *\n     * @param {Object} data\n     * @param {Object} options\n     * @param {Function} callback\n     * @return {Socket} for chaining\n     * @api public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data, options, callback) {\n      this.sendPacket(\"message\", data, options, callback);\n      return this;\n    }\n  }, {\n    key: \"write\",\n    value: function write(data, options, callback) {\n      this.sendPacket(\"message\", data, options, callback);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type - packet type\n     * @param {String} data\n     * @param {Object} options\n     * @param {Function} callback\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, callback) {\n      if (\"function\" === typeof options) {\n        callback = options;\n        options = null;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n\n      if (\"closing\" !== this.readyState && \"closed\" !== this.readyState) {\n        debug('sending packet \"%s\" (%s)', type, data);\n        var packet = {\n          type: type,\n          options: options\n        };\n        if (data) packet.data = data; // exports packetCreate event\n\n        this.emit(\"packetCreate\", packet);\n        this.writeBuffer.push(packet); // add send callback to object, if defined\n\n        if (callback) this.packetsFn.push(callback);\n        this.flush();\n      }\n    }\n    /**\n     * Attempts to flush the packets buffer.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && this.writeBuffer.length) {\n        debug(\"flushing buffer to transport\");\n        this.emit(\"flush\", this.writeBuffer);\n        this.server.emit(\"flush\", this, this.writeBuffer);\n        var wbuf = this.writeBuffer;\n        this.writeBuffer = [];\n\n        if (!this.transport.supportsFraming) {\n          this.sentCallbackFn.push(this.packetsFn);\n        } else {\n          this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);\n        }\n\n        this.packetsFn = [];\n        this.transport.send(wbuf);\n        this.emit(\"drain\");\n        this.server.emit(\"drain\", this);\n      }\n    }\n    /**\n     * Get available upgrades for this socket.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"getAvailableUpgrades\",\n    value: function getAvailableUpgrades() {\n      var availableUpgrades = [];\n      var allUpgrades = this.server.upgrades(this.transport.name);\n      var i = 0;\n      var l = allUpgrades.length;\n\n      for (; i < l; ++i) {\n        var upg = allUpgrades[i];\n\n        if (this.server.opts.transports.indexOf(upg) !== -1) {\n          availableUpgrades.push(upg);\n        }\n      }\n\n      return availableUpgrades;\n    }\n    /**\n     * Closes the socket and underlying transport.\n     *\n     * @param {Boolean} discard - optional, discard the transport\n     * @return {Socket} for chaining\n     * @api public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(discard) {\n      if (\"open\" !== this.readyState) return;\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", this.closeTransport.bind(this, discard));\n        return;\n      }\n\n      this.closeTransport(discard);\n    }\n    /**\n     * Closes the underlying transport.\n     *\n     * @param {Boolean} discard\n     * @api private\n     */\n\n  }, {\n    key: \"closeTransport\",\n    value: function closeTransport(discard) {\n      if (discard) this.transport.discard();\n      this.transport.close(this.onClose.bind(this, \"forced close\"));\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    },\n    set: function set(state) {\n      debug(\"readyState updated from %s to %s\", this._readyState, state);\n      this._readyState = state;\n    }\n  }]);\n\n  return Socket;\n}(events_1.EventEmitter);\n\nexports.Socket = Socket;","map":null,"metadata":{},"sourceType":"script"}