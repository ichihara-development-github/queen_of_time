{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uServer = void 0;\n\nvar debug_1 = require(\"debug\");\n\nvar server_1 = require(\"./server\");\n\nvar transports_uws_1 = require(\"./transports-uws\");\n\nvar debug = (0, debug_1.default)(\"engine:uws\");\n\nvar uServer = /*#__PURE__*/function (_server_1$BaseServer) {\n  _inherits(uServer, _server_1$BaseServer);\n\n  function uServer() {\n    _classCallCheck(this, uServer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(uServer).apply(this, arguments));\n  }\n\n  _createClass(uServer, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {}\n    /**\n     * Prepares a request by processing the query string.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(req, res) {\n      req.method = req.getMethod().toUpperCase();\n      var params = new URLSearchParams(req.getQuery());\n      req._query = Object.fromEntries(params.entries());\n      req.headers = {};\n      req.forEach(function (key, value) {\n        req.headers[key] = value;\n      });\n      req.connection = {\n        remoteAddress: Buffer.from(res.getRemoteAddressAsText()).toString()\n      };\n      res.onAborted(function () {\n        debug(\"response has been aborted\");\n      });\n    }\n  }, {\n    key: \"createTransport\",\n    value: function createTransport(transportName, req) {\n      return new transports_uws_1.default[transportName](req);\n    }\n    /**\n     * Attach the engine to a µWebSockets.js server\n     * @param app\n     * @param options\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(app\n    /* : TemplatedApp */\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var path = (options.path || \"/engine.io\").replace(/\\/$/, \"\") + \"/\";\n      app.any(path, this.handleRequest.bind(this)) //\n      .ws(path, {\n        compression: options.compression,\n        idleTimeout: options.idleTimeout,\n        maxBackpressure: options.maxBackpressure,\n        maxPayloadLength: this.opts.maxHttpBufferSize,\n        upgrade: this.handleUpgrade.bind(this),\n        open: function open(ws) {\n          ws.transport.socket = ws;\n          ws.transport.writable = true;\n          ws.transport.emit(\"drain\");\n        },\n        message: function message(ws, _message, isBinary) {\n          ws.transport.onData(isBinary ? _message : Buffer.from(_message).toString());\n        },\n        close: function close(ws, code, message) {\n          ws.transport.onClose(code, message);\n        }\n      });\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(res, req) {\n      var _this = this;\n\n      debug('handling \"%s\" http request \"%s\"', req.getMethod(), req.getUrl());\n      this.prepare(req, res);\n      req.res = res;\n\n      var callback = function callback(errorCode, errorContext) {\n        if (errorCode !== undefined) {\n          _this.emit(\"connection_error\", {\n            req: req,\n            code: errorCode,\n            message: server_1.Server.errorMessages[errorCode],\n            context: errorContext\n          });\n\n          _this.abortRequest(req.res, errorCode, errorContext);\n\n          return;\n        }\n\n        if (req._query.sid) {\n          debug(\"setting new request for existing client\");\n\n          _this.clients[req._query.sid].transport.onRequest(req);\n        } else {\n          var closeConnection = function closeConnection(errorCode, errorContext) {\n            return _this.abortRequest(res, errorCode, errorContext);\n          };\n\n          _this.handshake(req._query.transport, req, closeConnection);\n        }\n      };\n\n      if (this.corsMiddleware) {\n        // needed to buffer headers until the status is computed\n        req.res = new ResponseWrapper(res);\n        this.corsMiddleware.call(null, req, req.res, function () {\n          _this.verify(req, false, callback);\n        });\n      } else {\n        this.verify(req, false, callback);\n      }\n    }\n  }, {\n    key: \"handleUpgrade\",\n    value: function handleUpgrade(res, req, context) {\n      var _this2 = this;\n\n      debug(\"on upgrade\");\n      this.prepare(req, res); // @ts-ignore\n\n      req.res = res;\n      this.verify(req, true, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(errorCode, errorContext) {\n          var id, transport, client;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!errorCode) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  _this2.emit(\"connection_error\", {\n                    req: req,\n                    code: errorCode,\n                    message: server_1.Server.errorMessages[errorCode],\n                    context: errorContext\n                  });\n\n                  _this2.abortRequest(res, errorCode, errorContext);\n\n                  return _context.abrupt(\"return\");\n\n                case 4:\n                  id = req._query.sid;\n\n                  if (!id) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  client = _this2.clients[id];\n\n                  if (!client) {\n                    debug(\"upgrade attempt for closed client\");\n                    res.close();\n                  } else if (client.upgrading) {\n                    debug(\"transport has already been trying to upgrade\");\n                    res.close();\n                  } else if (client.upgraded) {\n                    debug(\"transport had already been upgraded\");\n                    res.close();\n                  } else {\n                    debug(\"upgrading existing transport\");\n                    transport = _this2.createTransport(req._query.transport, req);\n                    client.maybeUpgrade(transport);\n                  }\n\n                  _context.next = 15;\n                  break;\n\n                case 10:\n                  _context.next = 12;\n                  return _this2.handshake(req._query.transport, req, function (errorCode, errorContext) {\n                    return _this2.abortRequest(res, errorCode, errorContext);\n                  });\n\n                case 12:\n                  transport = _context.sent;\n\n                  if (transport) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 15:\n                  res.upgrade({\n                    transport: transport\n                  }, req.getHeader(\"sec-websocket-key\"), req.getHeader(\"sec-websocket-protocol\"), req.getHeader(\"sec-websocket-extensions\"), context);\n\n                case 16:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"abortRequest\",\n    value: function abortRequest(res, errorCode, errorContext) {\n      var statusCode = errorCode === server_1.Server.errors.FORBIDDEN ? \"403 Forbidden\" : \"400 Bad Request\";\n      var message = errorContext && errorContext.message ? errorContext.message : server_1.Server.errorMessages[errorCode];\n      res.writeStatus(statusCode);\n      res.writeHeader(\"Content-Type\", \"application/json\");\n      res.end(JSON.stringify({\n        code: errorCode,\n        message: message\n      }));\n    }\n  }]);\n\n  return uServer;\n}(server_1.BaseServer);\n\nexports.uServer = uServer;\n\nvar ResponseWrapper = /*#__PURE__*/function () {\n  function ResponseWrapper(res) {\n    _classCallCheck(this, ResponseWrapper);\n\n    this.res = res;\n    this.statusWritten = false;\n    this.headers = [];\n  }\n\n  _createClass(ResponseWrapper, [{\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      this.writeHeader(key, value);\n    } // needed by vary: https://github.com/jshttp/vary/blob/5d725d059b3871025cf753e9dfa08924d0bcfa8f/index.js#L134\n\n  }, {\n    key: \"getHeader\",\n    value: function getHeader() {}\n  }, {\n    key: \"writeStatus\",\n    value: function writeStatus(status) {\n      this.res.writeStatus(status);\n      this.statusWritten = true;\n      this.writeBufferedHeaders();\n    }\n  }, {\n    key: \"writeHeader\",\n    value: function writeHeader(key, value) {\n      if (key === \"Content-Length\") {\n        // the content length is automatically added by uWebSockets.js\n        return;\n      }\n\n      if (this.statusWritten) {\n        this.res.writeHeader(key, value);\n      } else {\n        this.headers.push([key, value]);\n      }\n    }\n  }, {\n    key: \"writeBufferedHeaders\",\n    value: function writeBufferedHeaders() {\n      var _this3 = this;\n\n      this.headers.forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            value = _ref3[1];\n\n        _this3.res.writeHeader(key, value);\n      });\n    }\n  }, {\n    key: \"end\",\n    value: function end(data) {\n      if (!this.statusWritten) {\n        // status will be inferred as \"200 OK\"\n        this.writeBufferedHeaders();\n      }\n\n      this.res.end(data);\n    }\n  }, {\n    key: \"onData\",\n    value: function onData(fn) {\n      this.res.onData(fn);\n    }\n  }, {\n    key: \"onAborted\",\n    value: function onAborted(fn) {\n      this.res.onAborted(fn);\n    }\n  }, {\n    key: \"statusCode\",\n    set: function set(status) {\n      this.writeStatus(status === 200 ? \"200 OK\" : \"204 No Content\");\n    }\n  }]);\n\n  return ResponseWrapper;\n}();","map":null,"metadata":{},"sourceType":"script"}