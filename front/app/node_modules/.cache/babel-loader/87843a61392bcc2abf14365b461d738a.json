{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.RESERVED_EVENTS = void 0;\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar typed_events_1 = require(\"./typed-events\");\n\nvar base64id_1 = __importDefault(require(\"base64id\"));\n\nvar broadcast_operator_1 = require(\"./broadcast-operator\");\n\nvar debug = (0, debug_1.default)(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\"]);\n\nfunction noop() {}\n\nvar Socket = /*#__PURE__*/function (_typed_events_1$Stric) {\n  _inherits(Socket, _typed_events_1$Stric);\n\n  /**\n   * Interface to a `Client` for a given `Namespace`.\n   *\n   * @param {Namespace} nsp\n   * @param {Client} client\n   * @param {Object} auth\n   * @package\n   */\n  function Socket(nsp, client, auth) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Socket).call(this));\n    _this.nsp = nsp;\n    _this.client = client;\n    /**\n     * Additional information that can be attached to the Socket instance and which will be used in the fetchSockets method\n     */\n\n    _this.data = {};\n    _this.connected = false;\n    _this.acks = new Map();\n    _this.fns = [];\n    _this.flags = {};\n    _this.server = nsp.server;\n    _this.adapter = _this.nsp.adapter;\n\n    if (client.conn.protocol === 3) {\n      // @ts-ignore\n      _this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n    } else {\n      _this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n    }\n\n    _this.handshake = _this.buildHandshake(auth);\n    return _this;\n  }\n  /**\n   * Builds the `handshake` BC object\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"buildHandshake\",\n    value: function buildHandshake(auth) {\n      return {\n        headers: this.request.headers,\n        time: new Date() + \"\",\n        address: this.conn.remoteAddress,\n        xdomain: !!this.request.headers.origin,\n        // @ts-ignore\n        secure: !!this.request.connection.encrypted,\n        issued: +new Date(),\n        url: this.request.url,\n        // @ts-ignore\n        query: this.request._query,\n        auth: auth\n      };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @return Always returns `true`.\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (exports.RESERVED_EVENTS.has(ev)) {\n        throw new Error(\"\\\"\".concat(String(ev), \"\\\" is a reserved event name\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var data = [ev].concat(args);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: data\n      }; // access last argument to see if it's an ACK callback\n\n      if (typeof data[data.length - 1] === \"function\") {\n        var id = this.nsp._ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        this.registerAckCallback(id, data.pop());\n        packet.id = id;\n      }\n\n      var flags = Object.assign({}, this.flags);\n      this.flags = {};\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet, flags);\n      return true;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"registerAckCallback\",\n    value: function registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks.set(id, ack);\n        return;\n      }\n\n      var timer = setTimeout(function () {\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n\n        _this2.acks.delete(id);\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      this.acks.set(id, function () {\n        clearTimeout(timer);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      });\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(room) {\n      return this.newBroadcastOperator().to(room);\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(room) {\n      return this.newBroadcastOperator().in(room);\n    }\n    /**\n     * Excludes a room when broadcasting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"except\",\n    value: function except(room) {\n      return this.newBroadcastOperator().except(room);\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _packet.nsp = this.nsp.name;\n      opts.compress = false !== opts.compress;\n\n      this.client._packet(_packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(rooms) {\n      debug(\"join room %s\", rooms);\n      return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(room) {\n      debug(\"leave room %s\", room);\n      return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"leaveAll\",\n    value: function leaveAll() {\n      this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onconnect\",\n    value: function _onconnect() {\n      debug(\"socket connected - writing packet\");\n      this.connected = true;\n      this.join(this.id);\n\n      if (this.conn.protocol === 3) {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: {\n            sid: this.id\n          }\n        });\n      }\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n\n  }, {\n    key: \"_onpacket\",\n    value: function _onpacket(packet) {\n      debug(\"got packet %j\", packet);\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n      }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Packet} packet - packet object\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this.dispatch(args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        var args = Array.prototype.slice.call(arguments);\n        debug(\"sending ack %j\", args);\n        self.packet({\n          id: id,\n          type: socket_io_parser_1.PacketType.ACK,\n          data: args\n        });\n        sent = true;\n      };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks.get(packet.id);\n\n      if (\"function\" == typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        this.acks.delete(packet.id);\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"got disconnect packet\");\n\n      this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onerror\",\n    value: function _onerror(err) {\n      if (this.listeners(\"error\").length) {\n        this.emitReserved(\"error\", err);\n      } else {\n        console.error(\"Missing error handler on `socket`.\");\n        console.error(err.stack);\n      }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onclose\",\n    value: function _onclose(reason) {\n      if (!this.connected) return this;\n      debug(\"closing socket - reason %s\", reason);\n      this.emitReserved(\"disconnecting\", reason);\n\n      this._cleanup();\n\n      this.nsp._remove(this);\n\n      this.client._remove(this);\n\n      this.connected = false;\n      this.emitReserved(\"disconnect\", reason);\n      return;\n    }\n    /**\n     * Makes the socket leave all the rooms it was part of and prevents it from joining any other room\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_cleanup\",\n    value: function _cleanup() {\n      this.leaveAll();\n      this.join = noop;\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n        data: err\n      });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     *\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.connected) return this;\n\n      if (close) {\n        this.client._disconnect();\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n\n        this._onclose(\"server namespace disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"timeout\",\n\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the client:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the client did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Dispatch incoming event to socket listeners.\n     *\n     * @param {Array} event - event that will get emitted\n     * @private\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(event) {\n      var _this3 = this;\n\n      debug(\"dispatching an event %j\", event);\n      this.run(event, function (err) {\n        process.nextTick(function () {\n          if (err) {\n            return _this3._onerror(err);\n          }\n\n          if (_this3.connected) {\n            _get(_getPrototypeOf(Socket.prototype), \"emitUntyped\", _this3).apply(_this3, event);\n          } else {\n            debug(\"ignore packet received after disconnection\");\n          }\n        });\n      });\n    }\n    /**\n     * Sets up socket middleware.\n     *\n     * @param {Function} fn - middleware function (event, next)\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(fn) {\n      this.fns.push(fn);\n      return this;\n    }\n    /**\n     * Executes the middleware for an incoming event.\n     *\n     * @param {Array} event - event that will get emitted\n     * @param {Function} fn - last fn call in the middleware\n     * @private\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(event, fn) {\n      var fns = this.fns.slice(0);\n      if (!fns.length) return fn(null);\n\n      function run(i) {\n        fns[i](event, function (err) {\n          // upon error, short-circuit\n          if (err) return fn(err); // if no middleware left, summon callback\n\n          if (!fns[i + 1]) return fn(null); // go on to next\n\n          run(i + 1);\n        });\n      }\n\n      run(0);\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n\n  }, {\n    key: \"onAny\",\n\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback.\n     *\n     * @param listener\n     * @public\n     */\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is received.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent (emit or broadcast)\n     *\n     * @param packet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: \"newBroadcastOperator\",\n    value: function newBroadcastOperator() {\n      var flags = Object.assign({}, this.flags);\n      this.flags = {};\n      return new broadcast_operator_1.BroadcastOperator(this.adapter, new Set(), new Set([this.id]), flags);\n    }\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"broadcast\",\n    get: function get() {\n      return this.newBroadcastOperator();\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"local\",\n    get: function get() {\n      return this.newBroadcastOperator().local;\n    }\n  }, {\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"request\",\n    get: function get() {\n      return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @public\n     */\n\n  }, {\n    key: \"conn\",\n    get: function get() {\n      return this.client.conn;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"rooms\",\n    get: function get() {\n      return this.adapter.socketRooms(this.id) || new Set();\n    }\n  }]);\n\n  return Socket;\n}(typed_events_1.StrictEventEmitter);\n\nexports.Socket = Socket;","map":null,"metadata":{},"sourceType":"script"}