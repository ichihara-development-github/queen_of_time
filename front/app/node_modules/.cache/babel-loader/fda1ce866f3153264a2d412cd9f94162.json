{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nvar events_1 = require(\"events\");\n\nvar Adapter = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Adapter, _events_1$EventEmitte);\n\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  function Adapter(nsp) {\n    var _this;\n\n    _classCallCheck(this, Adapter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Adapter).call(this));\n    _this.nsp = nsp;\n    _this.rooms = new Map();\n    _this.sids = new Map();\n    _this.encoder = nsp.server.encoder;\n    return _this;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  _createClass(Adapter, [{\n    key: \"init\",\n    value: function init() {}\n    /**\n     * To be overridden\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {}\n    /**\n     * Returns the number of Socket.IO servers in the cluster\n     *\n     * @public\n     */\n\n  }, {\n    key: \"serverCount\",\n    value: function serverCount() {\n      return Promise.resolve(1);\n    }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(id, rooms) {\n      if (!this.sids.has(id)) {\n        this.sids.set(id, new Set());\n      }\n\n      var _iterator = _createForOfIteratorHelper(rooms),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var room = _step.value;\n          this.sids.get(id).add(room);\n\n          if (!this.rooms.has(room)) {\n            this.rooms.set(room, new Set());\n            this.emit(\"create-room\", room);\n          }\n\n          if (!this.rooms.get(room).has(id)) {\n            this.rooms.get(room).add(id);\n            this.emit(\"join-room\", room, id);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(id, room) {\n      if (this.sids.has(id)) {\n        this.sids.get(id).delete(room);\n      }\n\n      this._del(room, id);\n    }\n  }, {\n    key: \"_del\",\n    value: function _del(room, id) {\n      var _room = this.rooms.get(room);\n\n      if (_room != null) {\n        var deleted = _room.delete(id);\n\n        if (deleted) {\n          this.emit(\"leave-room\", room, id);\n        }\n\n        if (_room.size === 0 && this.rooms.delete(room)) {\n          this.emit(\"delete-room\", room);\n        }\n      }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"delAll\",\n    value: function delAll(id) {\n      if (!this.sids.has(id)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.sids.get(id)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var room = _step2.value;\n\n          this._del(room, id);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(packet, opts) {\n      var flags = opts.flags || {};\n      var packetOpts = {\n        preEncoded: true,\n        volatile: flags.volatile,\n        compress: flags.compress\n      };\n      packet.nsp = this.nsp.name;\n      var encodedPackets = this.encoder.encode(packet);\n      this.apply(opts, function (socket) {\n        if (typeof socket.notifyOutgoingListeners === \"function\") {\n          socket.notifyOutgoingListeners(packet);\n        }\n\n        socket.client.writeToEngine(encodedPackets, packetOpts);\n      });\n    }\n    /**\n     * Broadcasts a packet and expects multiple acknowledgements.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @param clientCountCallback - the number of clients that received the packet\n     * @param ack                 - the callback that will be called for each client response\n     *\n     * @public\n     */\n\n  }, {\n    key: \"broadcastWithAck\",\n    value: function broadcastWithAck(packet, opts, clientCountCallback, ack) {\n      var flags = opts.flags || {};\n      var packetOpts = {\n        preEncoded: true,\n        volatile: flags.volatile,\n        compress: flags.compress\n      };\n      packet.nsp = this.nsp.name; // we can use the same id for each packet, since the _ids counter is common (no duplicate)\n\n      packet.id = this.nsp._ids++;\n      var encodedPackets = this.encoder.encode(packet);\n      var clientCount = 0;\n      this.apply(opts, function (socket) {\n        // track the total number of acknowledgements that are expected\n        clientCount++; // call the ack callback for each client response\n\n        socket.acks.set(packet.id, ack);\n\n        if (typeof socket.notifyOutgoingListeners === \"function\") {\n          socket.notifyOutgoingListeners(packet);\n        }\n\n        socket.client.writeToEngine(encodedPackets, packetOpts);\n      });\n      clientCountCallback(clientCount);\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n\n  }, {\n    key: \"sockets\",\n    value: function sockets(rooms) {\n      var sids = new Set();\n      this.apply({\n        rooms: rooms\n      }, function (socket) {\n        sids.add(socket.id);\n      });\n      return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"socketRooms\",\n    value: function socketRooms(id) {\n      return this.sids.get(id);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @param opts - the filters to apply\n     */\n\n  }, {\n    key: \"fetchSockets\",\n    value: function fetchSockets(opts) {\n      var sockets = [];\n      this.apply(opts, function (socket) {\n        sockets.push(socket);\n      });\n      return Promise.resolve(sockets);\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to join\n     */\n\n  }, {\n    key: \"addSockets\",\n    value: function addSockets(opts, rooms) {\n      this.apply(opts, function (socket) {\n        socket.join(rooms);\n      });\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to leave\n     */\n\n  }, {\n    key: \"delSockets\",\n    value: function delSockets(opts, rooms) {\n      this.apply(opts, function (socket) {\n        rooms.forEach(function (room) {\n          return socket.leave(room);\n        });\n      });\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param opts - the filters to apply\n     * @param close - whether to close the underlying connection\n     */\n\n  }, {\n    key: \"disconnectSockets\",\n    value: function disconnectSockets(opts, close) {\n      this.apply(opts, function (socket) {\n        socket.disconnect(close);\n      });\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(opts, callback) {\n      var rooms = opts.rooms;\n      var except = this.computeExceptSids(opts.except);\n\n      if (rooms.size) {\n        var ids = new Set();\n\n        var _iterator3 = _createForOfIteratorHelper(rooms),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var room = _step3.value;\n            if (!this.rooms.has(room)) continue;\n\n            var _iterator4 = _createForOfIteratorHelper(this.rooms.get(room)),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var id = _step4.value;\n                if (ids.has(id) || except.has(id)) continue;\n                var socket = this.nsp.sockets.get(id);\n\n                if (socket) {\n                  callback(socket);\n                  ids.add(id);\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(this.sids),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 1),\n                _id = _step5$value[0];\n\n            if (except.has(_id)) continue;\n\n            var _socket = this.nsp.sockets.get(_id);\n\n            if (_socket) callback(_socket);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"computeExceptSids\",\n    value: function computeExceptSids(exceptRooms) {\n      var exceptSids = new Set();\n\n      if (exceptRooms && exceptRooms.size > 0) {\n        var _iterator6 = _createForOfIteratorHelper(exceptRooms),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var room = _step6.value;\n\n            if (this.rooms.has(room)) {\n              this.rooms.get(room).forEach(function (sid) {\n                return exceptSids.add(sid);\n              });\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      return exceptSids;\n    }\n    /**\n     * Send a packet to the other Socket.IO servers in the cluster\n     * @param packet - an array of arguments, which may include an acknowledgement callback at the end\n     */\n\n  }, {\n    key: \"serverSideEmit\",\n    value: function serverSideEmit(packet) {\n      console.warn(\"this adapter does not support the serverSideEmit() functionality\");\n    }\n  }]);\n\n  return Adapter;\n}(events_1.EventEmitter);\n\nexports.Adapter = Adapter;","map":null,"metadata":{},"sourceType":"script"}