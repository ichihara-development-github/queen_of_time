{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from './useUtils';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\n\nexport var useValueWithTimezone = function useValueWithTimezone(_ref3) {\n  var timezoneProp = _ref3.timezone,\n      valueProp = _ref3.value,\n      defaultValue = _ref3.defaultValue,\n      onChange = _ref3.onChange,\n      valueManager = _ref3.valueManager;\n\n  var _ref, _ref2;\n\n  var utils = useUtils();\n  var firstDefaultValue = React.useRef(defaultValue);\n  var inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;\n  var inputTimezone = React.useMemo(function () {\n    return valueManager.getTimezone(utils, inputValue);\n  }, [utils, valueManager, inputValue]);\n  var setInputTimezone = useEventCallback(function (newValue) {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  var timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';\n  var valueWithTimezoneToRender = React.useMemo(function () {\n    return valueManager.setTimezone(utils, timezoneToRender, inputValue);\n  }, [valueManager, utils, timezoneToRender, inputValue]);\n  var handleValueChange = useEventCallback(function (newValue) {\n    var newValueWithInputTimezone = setInputTimezone(newValue);\n\n    for (var _len = arguments.length, otherParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      otherParams[_key - 1] = arguments[_key];\n    }\n\n    onChange == null || onChange.apply(void 0, [newValueWithInputTimezone].concat(otherParams));\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange: handleValueChange,\n    timezone: timezoneToRender\n  };\n};\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\n\nexport var useControlledValueWithTimezone = function useControlledValueWithTimezone(_ref4) {\n  var name = _ref4.name,\n      timezoneProp = _ref4.timezone,\n      valueProp = _ref4.value,\n      defaultValue = _ref4.defaultValue,\n      onChangeProp = _ref4.onChange,\n      valueManager = _ref4.valueManager;\n\n  var _useControlled = useControlled({\n    name: name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : valueManager.emptyValue\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      valueWithInputTimezone = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var onChange = useEventCallback(function (newValue) {\n    setValue(newValue);\n\n    for (var _len2 = arguments.length, otherParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      otherParams[_key2 - 1] = arguments[_key2];\n    }\n\n    onChangeProp == null || onChangeProp.apply(void 0, [newValue].concat(otherParams));\n  });\n  return useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueWithInputTimezone,\n    defaultValue: undefined,\n    onChange: onChange,\n    valueManager: valueManager\n  });\n};","map":null,"metadata":{},"sourceType":"module"}